"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
exports.execute = execute;
const discord_js_1 = require("discord.js");
const SettingsService_1 = require("../services/settings/SettingsService");
exports.data = new discord_js_1.SlashCommandBuilder()
    .setName('shop')
    .setDescription('–í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω')
    .addSubcommand(subcommand => subcommand
    .setName('list')
    .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'))
    .addSubcommand(subcommand => subcommand
    .setName('buy')
    .setDescription('–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä')
    .addIntegerOption(option => option
    .setName('item_id')
    .setDescription('ID —Ç–æ–≤–∞—Ä–∞')
    .setRequired(true)))
    .addSubcommand(subcommand => subcommand
    .setName('balance')
    .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å'));
async function execute(interaction, bot) {
    const guildId = interaction.guild.id;
    const settingsService = new SettingsService_1.SettingsService(bot.database, bot.redis);
    const settings = await settingsService.getGuildSettings(guildId);
    if (!settings.economy?.shop_enabled) {
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('üè™ –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω')
            .setFooter({ text: '–í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.' });
        await interaction.reply({ embeds: [embed], ephemeral: true });
        return;
    }
    const subcommand = interaction.options.getSubcommand();
    switch (subcommand) {
        case 'list':
            await showShop(interaction, bot);
            break;
        case 'buy':
            const itemId = interaction.options.getInteger('item_id', true);
            await buyItem(interaction, bot, itemId);
            break;
        case 'balance':
            await showBalance(interaction, bot);
            break;
    }
}
async function showShop(interaction, bot) {
    await interaction.deferReply();
    try {
        if (!bot.database.ShopItems)
            throw new Error('Database not connected');
        const items = await bot.database.ShopItems.findAll({
            where: {
                guild_id: interaction.guild?.id,
                is_active: true
            },
            order: [['price', 'ASC']],
            raw: true,
        });
        if (items.length === 0) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('üè™ –ú–∞–≥–∞–∑–∏–Ω')
                .setDescription('–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.');
            await interaction.editReply({ embeds: [embed] });
            return;
        }
        let description = '';
        items.forEach((item) => {
            description += `**${item.id}.** ${item.name} - ${item.price} ü™ô\n`;
            if (item.description) {
                description += `   ${item.description}\n`;
            }
            description += '\n';
        });
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#00FF00')
            .setTitle('üè™ –ú–∞–≥–∞–∑–∏–Ω')
            .setDescription(description)
            .setFooter({ text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop buy <id> –¥–ª—è –ø–æ–∫—É–ø–∫–∏' });
        await interaction.editReply({ embeds: [embed] });
    }
    catch (error) {
        console.error('Error showing shop:', error);
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞.');
        await interaction.editReply({ embeds: [embed] });
    }
}
async function buyItem(interaction, bot, itemId) {
    await interaction.deferReply();
    try {
        if (!bot.database.ShopItems || !bot.database.User || !bot.database.UserPurchases) {
            throw new Error('Database not connected');
        }
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        const item = await bot.database.ShopItems.findOne({
            where: {
                id: itemId,
                guild_id: interaction.guild?.id,
                is_active: true
            }
        });
        if (!item) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#eb4034')
                .setTitle('–û—à–∏–±–∫–∞')
                .setDescription('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            await interaction.editReply({ embeds: [embed] });
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await bot.database.getUser(interaction.user.id);
        if (!user) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#eb4034')
                .setTitle('–û—à–∏–±–∫–∞')
                .setDescription('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
            await interaction.editReply({ embeds: [embed] });
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (user.coins < item.price) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
                .setDescription(`–£ –≤–∞—Å ${user.coins} ü™ô, –∞ –Ω—É–∂–Ω–æ ${item.price} ü™ô`);
            await interaction.editReply({ embeds: [embed] });
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —É–∂–µ
        const existingPurchase = await bot.database.UserPurchases.findOne({
            where: {
                user_id: interaction.user.id,
                item_id: itemId
            }
        });
        if (existingPurchase) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#eb4034')
                .setTitle('–û—à–∏–±–∫–∞')
                .setDescription('‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.');
            await interaction.editReply({ embeds: [embed] });
            return;
        }
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É - —É–º–µ–Ω—å—à–∞–µ–º –º–æ–Ω–µ—Ç—ã
        await bot.database.User.decrement('coins', {
            by: item.price,
            where: { id: interaction.user.id }
        });
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        await bot.database.UserPurchases.create({
            user_id: interaction.user.id,
            guild_id: interaction.guild?.id || '',
            item_id: itemId,
        });
        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–ª—å, –≤—ã–¥–∞–µ–º –µ—ë
        if (item.role_id) {
            try {
                const member = await interaction.guild?.members.fetch(interaction.user.id);
                const role = await interaction.guild?.roles.fetch(item.role_id);
                if (member && role) {
                    await member.roles.add(role);
                }
            }
            catch (roleError) {
                console.error('Error adding role:', roleError);
            }
        }
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#00FF00')
            .setTitle('‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!')
            .setDescription(`–í—ã –∫—É–ø–∏–ª–∏ **${item.name}** –∑–∞ ${item.price} ü™ô`)
            .addFields({
            name: '–û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç:',
            value: `${user.coins - item.price} ü™ô`
        });
        await interaction.editReply({ embeds: [embed] });
    }
    catch (error) {
        console.error('Error buying item:', error);
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.');
        await interaction.editReply({ embeds: [embed] });
    }
}
async function showBalance(interaction, bot) {
    await interaction.deferReply();
    try {
        const user = await bot.database.getUser(interaction.user.id);
        if (!user) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#eb4034')
                .setTitle('–û—à–∏–±–∫–∞')
                .setDescription('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
            await interaction.editReply({ embeds: [embed] });
            return;
        }
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#FFD700')
            .setTitle('üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å')
            .setDescription(`–£ –≤–∞—Å **${user.coins}** ü™ô`)
            .addFields([
            { name: 'üìä –£—Ä–æ–≤–µ–Ω—å:', value: `${user.level}`, inline: true },
            { name: '‚≠ê –û–ø—ã—Ç:', value: `${user.xp} XP`, inline: true }
        ]);
        await interaction.editReply({ embeds: [embed] });
    }
    catch (error) {
        console.error('Error showing balance:', error);
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
        await interaction.editReply({ embeds: [embed] });
    }
}
//# sourceMappingURL=shop.js.map