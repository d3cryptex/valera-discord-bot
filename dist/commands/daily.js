"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
exports.execute = execute;
const discord_js_1 = require("discord.js");
const SettingsService_1 = require("../services/settings/SettingsService");
const luxon_1 = require("luxon");
const updateBattlePassProgress_1 = require("../services/battlepass/updateBattlePassProgress");
exports.data = new discord_js_1.SlashCommandBuilder()
    .setName('daily')
    .setDescription('–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å');
async function execute(interaction, bot) {
    await interaction.deferReply();
    try {
        const settingsService = new SettingsService_1.SettingsService(bot.database, bot.redis);
        const settings = await settingsService.getGuildSettings(interaction.guild.id);
        if (!settings.economy.daily_bonus_enabled) {
            const embed = new discord_js_1.EmbedBuilder()
                .setColor('#eb4034')
                .setTitle('–û—à–∏–±–∫–∞')
                .setDescription('‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.')
                .setFooter({ text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.' });
            await interaction.reply({ embeds: [embed], ephemeral: true });
            return;
        }
        const userId = interaction.user.id;
        await bot.database.createUser(userId, interaction.user.username);
        const timezone = settings.system.timezone || 'Europe/Moscow';
        const now = luxon_1.DateTime.now().setZone(timezone);
        const today = now.toFormat('yyyy-MM-dd');
        const lastClaimKey = `daily:${userId}:${interaction.guild.id}`;
        const lastClaim = await bot.redis.get(lastClaimKey);
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å streak –≤ –ë–î)
        const user = await bot.database.getUser(userId);
        let streak = user.streak ?? 0;
        const lastStreakDate = user.last_streak_date ?? null;
        const yesterday = now.minus({ days: 1 }).toFormat('yyyy-MM-dd');
        if (lastClaim === today) {
            await interaction.editReply({ embeds: [
                    new discord_js_1.EmbedBuilder()
                        .setColor('#FFFF00')
                        .setTitle('‚è∞ –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ')
                        .setDescription(`–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!\n\n–í–∞—à–∞ —Å–µ—Ä–∏—è: ${streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`)
                        .setFooter({ text: '–ë–æ–Ω—É—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å' })
                ] });
            return;
        }
        // streak (–ª–æ–≥–∏–∫–∞ –≤ –ë–î)
        if (lastStreakDate === yesterday) {
            streak += 1;
        }
        else {
            streak = 1;
        }
        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        const min = settings.economy.daily_bonus_min;
        const max = settings.economy.daily_bonus_max;
        const bonusAmount = Math.floor((Math.random() * (max - min + 1)) + min);
        if (!bot.database.User)
            throw new Error('Database not connected');
        await bot.database.User.increment('coins', {
            by: bonusAmount,
            where: { id: userId }
        });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º streak –∏ last_streak_date –≤ –ë–î
        await bot.database.User.update({ streak, last_streak_date: today }, { where: { id: userId } });
        await (0, updateBattlePassProgress_1.updateBattlePassProgress)({
            bot,
            userId,
            guildId: interaction.guild.id,
            type: 'streak',
            isDaily: true,
            channel: interaction.channel,
            interaction
        });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const midnight = now.plus({ days: 1 }).startOf('day');
        const secondsUntilMidnight = Math.max(1, Math.floor(midnight.diff(now, 'seconds').seconds));
        await bot.redis.set(lastClaimKey, today, secondsUntilMidnight);
        // –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAfter = await bot.database.getUser(userId);
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#00FF00')
            .setTitle('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!')
            .setDescription(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ **${bonusAmount}** ${settings.economy.currency_emoji}\n–í–∞—à–∞ —Å–µ—Ä–∏—è: **${userAfter.streak}** –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!`)
            .addFields([
            { name: '–í–∞—à –±–∞–ª–∞–Ω—Å:', value: `${userAfter.coins} ${settings.economy.currency_emoji}`, inline: true },
            { name: '–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å:', value: '–ó–∞–≤—Ç—Ä–∞ –≤ –ø–æ–ª–Ω–æ—á—å', inline: true }
        ])
            .setFooter({ text: '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!' })
            .setTimestamp();
        await interaction.editReply({ embeds: [embed] });
    }
    catch (error) {
        console.error('Error in daily command:', error);
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞.');
        await interaction.editReply({ embeds: [embed] });
    }
}
//# sourceMappingURL=daily.js.map