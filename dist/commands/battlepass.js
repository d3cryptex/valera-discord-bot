"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
exports.execute = execute;
const discord_js_1 = require("discord.js");
const luxon_1 = require("luxon");
function renderRewardText(rewardObj, settings) {
    const coinName = settings.economy.currency_name;
    const coinSign = settings.economy.currency_emoji;
    if (!rewardObj || !rewardObj.type)
        return '';
    switch (rewardObj.type) {
        case 'role':
            return `<@&${rewardObj.reward}>`; // reward = id —Ä–æ–ª–∏
        case 'coins':
            return `${coinSign} ${rewardObj.reward} ${coinName}`; // reward = —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç
        case 'custom':
            return `üéÅ ${rewardObj.reward}`;
        default:
            return String(rewardObj.reward ?? '');
    }
}
function renderBPQuests(quests, doneArr) {
    if (!quests?.length)
        return '–ù–µ—Ç –∑–∞–¥–∞—á';
    return quests.map((q, i) => {
        const done = doneArr?.[i] ?? false;
        const emoji = done ? '‚úÖ' : '‚ùå';
        return `${emoji} ${q.text} \`${q.reward}xp\``;
    }).join('\n');
}
function rotateTasks(tasks, max, dayOffset) {
    if (tasks.length === 0)
        return [];
    const offset = (dayOffset * max) % tasks.length;
    let rotated = [];
    for (let i = 0; i < max && tasks.length > 0; i++) {
        rotated.push(tasks[(offset + i) % tasks.length]);
    }
    return rotated;
}
exports.data = new discord_js_1.SlashCommandBuilder()
    .setName('battlepass')
    .setDescription('–í–∞—à Battle Pass –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å')
    .addSubcommand(s => s.setName('progress')
    .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Battle Pass'))
    .addSubcommand(s => s.setName('roadmap')
    .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞–≥—Ä–∞–¥'));
async function execute(interaction, bot) {
    const settings = await bot.settingsService.getGuildSettings(interaction.guildId);
    if (!settings.battlepass?.enabled) {
        await interaction.reply({
            embeds: [
                new discord_js_1.EmbedBuilder()
                    .setColor('#eb4034')
                    .setTitle('–û—à–∏–±–∫–∞')
                    .setDescription('‚ùå Battle Pass –æ—Ç–∫–ª—é—á—ë–Ω.')
                    .setDescription('–ú–µ—Ö–∞–Ω–∏–∫–∞ Battle Pass –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.')
            ]
        });
        return;
    }
    const subcommand = interaction.options.getSubcommand();
    const userId = interaction.user.id;
    const user = await bot.database.getUser(userId);
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Battle Pass
    const bp = settings.battlepass ?? {};
    const dailyQuests = bp.daily_quests ?? [];
    const weeklyQuests = bp.weekly_quests ?? [];
    const bpLevels = bp.levels ?? 50;
    const bpXP = typeof bp.xp_for_level === 'number' ? bp.xp_for_level : 100;
    // –î–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –∑–∞–¥–∞—á
    const now = luxon_1.DateTime.now().setZone(settings.system?.timezone || 'Europe/Moscow');
    const seasonStart = luxon_1.DateTime.now().startOf('month');
    const dayOffset = Math.floor(now.diff(seasonStart, 'days').days);
    const weekOffset = Math.floor(now.diff(seasonStart, 'weeks').weeks);
    const todayDailies = rotateTasks(dailyQuests, 3, dayOffset);
    const todayWeeklies = rotateTasks(weeklyQuests, 2, weekOffset);
    let dailyStatus;
    let weeklyStatus;
    try {
        dailyStatus = JSON.parse(user.battlepass_daily_status ?? '[]');
    }
    catch {
        dailyStatus = [];
    }
    try {
        weeklyStatus = JSON.parse(user.battlepass_weekly_status ?? '[]');
    }
    catch {
        weeklyStatus = [];
    }
    const userBPQuestStatus = {
        daily: dailyStatus,
        weekly: weeklyStatus
    };
    if (subcommand === 'progress') {
        const curLevel = Math.max(1, Math.min(user.battle_pass_level || 1, bpLevels));
        const curExp = user.battle_pass_exp || 0;
        const xpNeeded = bpXP;
        const percent = Math.floor((curExp / xpNeeded) * 100);
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressBar = createProgressBar(percent);
        // –í—ã–≤–µ—Å—Ç–∏ –≤–∏–¥–∏–º—ã–µ –∑–∞–¥–∞–Ω–∏—è:
        let dailyText = renderBPQuests(todayDailies, userBPQuestStatus.daily);
        let weeklyText = renderBPQuests(todayWeeklies, userBPQuestStatus.weekly);
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#0099FF')
            .setTitle(`Battle Pass ‚Äî —É—Ä–æ–≤–µ–Ω—å ${curLevel} / ${bpLevels}`)
            .setDescription(`**–û–ø—ã—Ç:** ${curExp} / ${xpNeeded}\n**–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${progressBar} ${percent}%`)
            .addFields([
            { name: 'üìÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã', value: dailyText, inline: false },
            { name: 'üóìÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã', value: weeklyText, inline: false }
        ])
            .setFooter({ text: '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!' });
        await interaction.reply({ embeds: [embed] });
    }
    else if (subcommand === 'roadmap') {
        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è roadmap (emoji-–º–∞—Ç—Ä–∏—Ü–∞, –¥–ª—è canvas —Å–¥–µ–ª–∞—é –æ—Ç–¥–µ–ª—å–Ω–æ)
        const curLevel = Math.max(1, Math.min(user.battle_pass_level || 1, bpLevels));
        const LEVELS_PER_ROW = 6;
        const ROWS = Math.ceil(bpLevels / LEVELS_PER_ROW);
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º snake-path –∫–∞–∫ –∏–Ω–¥–µ–∫—Å—ã
        let matrix = Array.from({ length: ROWS }, () => Array(LEVELS_PER_ROW).fill('‚ñ´Ô∏è'));
        let flatIndex = 0;
        let forward = true;
        for (let row = 0; row < ROWS; row++) {
            for (let i = 0; i < LEVELS_PER_ROW; i++) {
                const lvl = flatIndex + 1;
                if (lvl > bpLevels)
                    continue;
                let col = forward ? i : LEVELS_PER_ROW - 1 - i;
                let block = '‚¨ú';
                if (lvl < curLevel)
                    block = 'üü¶';
                if (lvl === curLevel)
                    block = 'üü¢';
                if (lvl === bpLevels)
                    block = 'üèÅ';
                const rowArr = matrix[row];
                if (rowArr)
                    rowArr[col] = block;
                flatIndex++;
            }
            forward = !forward;
        }
        const roadmapVisual = matrix.map(row => row.join(' ')).join('\n');
        // –ù–∞–≥—Ä–∞–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–π settings.battlepass.rewards –¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        let rewardsList = (bp.rewards || []);
        let rewardsDesc = '';
        for (let lvl = 1; lvl <= bpLevels; lvl++) {
            let rewardObj = rewardsList.find((r) => r.level === lvl) ?? {};
            let rewardPretty = renderRewardText(rewardObj, settings);
            rewardsDesc += `${lvl === curLevel ? '‚û°Ô∏è' : ' '} **${lvl}** ‚Äî ${rewardPretty}\n`;
        }
        const emb = new discord_js_1.EmbedBuilder()
            .setColor('#FFD700')
            .setTitle('üéØ Battle Pass ‚Äî Roadmap')
            .setDescription(`\`\`\`\n${roadmapVisual}\n\`\`\`\n${rewardsDesc}`)
            .setFooter({ text: 'üü¢ ‚Äî –≤–∞—à —É—Ä–æ–≤–µ–Ω—å; üü¶ ‚Äî –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ; ‚¨ú ‚Äî –±—É–¥—É—â–∏–µ; üèÅ ‚Äî —Ñ–∏–Ω–∞–ª' });
        await interaction.reply({ embeds: [emb] });
    }
}
function createProgressBar(percent, length = 18) {
    const filled = Math.floor((percent / 100) * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}
function processBattlePassLevelUp(user, settings, bot, interaction) {
    throw new Error('Function not implemented.');
}
//# sourceMappingURL=battlepass.js.map