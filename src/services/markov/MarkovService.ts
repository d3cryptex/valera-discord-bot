import { DatabaseService } from '../database/DatabaseService';
import { SettingsService } from '../settings/SettingsService';
import { GuildSettings } from '../settings/SettingsService';
import { logger } from '../../utils/logger';
import { Sequelize, Op} from 'sequelize';
import emojiRegex from 'emoji-regex';
import { Message, AttachmentBuilder  } from 'discord.js';
import { CanvasRenderingContext2D, createCanvas, loadImage, registerFont } from 'canvas';
import path from 'path';
import fs from 'fs';

registerFont(path.join(__dirname, '../../fonts/impact.ttf'), { family: 'Impact' });

const emotionRules: { pattern: RegExp, emoji: string }[] = [
    // –ü–æ–∑–∏—Ç–∏–≤ –∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —É—Å–ø–µ—Ö
    { pattern: /—Å–ø–∞—Å–∏–±–æ|thanks|—Å–ø—Å|thx|–±–ª–∞–≥–æ–¥–∞—Ä/i, emoji: 'üôè' },
    { pattern: /–ø—Ä–∏–≤–µ—Ç|hello|hi|–∫—É|—Ö–∞–π|–¥–∞—Ä–æ–≤–∞|–∑–¥–æ—Ä–æ–≤/i, emoji: 'üëã' },
    { pattern: /—Å–º–µ—à–Ω–æ|–∞—Ö–∞—Ö|–ª–æ–ª|—Ö–∞[—Öx]+|r–∂—É|lmao|rofl|funny|giggle|—É–≥–∞—Ä|—É–º–æ—Ä/i, emoji: 'ü§£' },
    { pattern: /–∫—Ä—É—Ç–æ|—Å—É–ø–µ—Ä|—à–∏–∫|–≤–∞—É|wow|–æ–≥–æ–Ω—å|–æ—Ç–ª–∏—á–Ω–æ|amazing|nice|–≤–æ—Å—Ö–∏—Ç/i, emoji: 'ü§©' },
    { pattern: /—Ç–æ–ø|best|–ª—É—á—à–µ|–∫–ª–∞—Å—Å|–ø—É—à–∫–∞|nice|–º–æ–ª–æ–¥–µ—Ü|–∏–∑–∏|ez/i, emoji: 'üî•' },
    { pattern: /–ª–∞–π–∫|like|–Ω—Ä–∞–≤|love|–ª—É–ø–∏ –ª–∞–π–∫/i, emoji: 'üëç' },
    { pattern: /—É—Ä–∞|—É—Ä–∞–∞|yea+h|yes|–ø–æ–±–µ–¥–∞|–ø–æ–≤–µ–∑–ª–æ|gj/i, emoji: 'üéâ' },
    { pattern: /–ø–æ–∑–¥—Ä–∞–≤|grats|congrats|–ø–æ–±–µ–¥/i, emoji: 'üèÜ' },
    { pattern: /—Ñ–ª–µ–∫—Å|—Ñ–ª–µ–∫—Å–∏—à—å|–∑–∞—Ñ–ª–µ–∫—Å–∏–ª/i, emoji: 'üí™' },
    { pattern: /–≤–∏–±–∞|vibe|–≤–∞–π–±|–≤–∞–π–±–∏–Ω/i, emoji: 'üòé' },
    { pattern: /—Ä–µ–∞–ª—å–Ω–æ|real|—Ä–µ–∞–ª/i, emoji: 'ü§î' }, // —é–∑–µ—Ä—ã —á–∞—Å—Ç–æ –ø–∏—à—É—Ç "—Ä–µ–∞–ª—å–Ω–æ?" –∫–∞–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    { pattern: /–±–æ–≥|–∞–ª–ª–∞—Ö|holy|godlike|—Å–≤—è—Ç/i, emoji: 'üôè' },
    // –ú–æ–ª–æ–¥—ë–∂–Ω—ã–µ –∫—Ä–∏–Ω–∂–æ–≤—ã–µ —Å–ª–æ–≤–∞
    { pattern: /–∫—Ä–∏–Ω–∂|cringe|–∑–∞—à–∫–≤–∞—Ä|—Å—Ç—ã–¥|—Å—Ç—ã–¥–Ω–æ|–Ω—É–ª–µ–≤—ã–π/i, emoji: 'ü´†' },
    { pattern: /—á–µ–ª|bro|–±—Ä–æ|—ç–π/i, emoji: 'üßë' },
    { pattern: /–∫–∞–ø–µ—Ü|–∂–µ—Å—Ç—å|—Ç—Ä–µ—à|omg|—É–∂–∞—Å|–∫–∞–ø–µ—Ü|fml|wtf|omg/i, emoji: 'üò±' },
    { pattern: /—Å–ª–∞–±|fail|–ª–æ—Ö|—Å–ª–∞–±–∞–∫|noob|–Ω—É–±/i, emoji: 'ü•≤' },
    // –ú–∞—Ç/—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ü–µ–Ω–∑—É—Ä–Ω–æ, –ø—Ä–æ—Å—Ç–æ üö´ –∏–ª–∏ üò∂)
    { pattern: /(?:–±–ª[—è*]+|—Å—É[–∫–∫—á]+|—Ö–µ—Ä|–ø–∏–¥[–∞–æ–µ]+|–≥–∞–Ω–¥–æ–Ω|–¥–æ–ª–±|–º—É–¥–∞–∫|–µ–±–∞+|fuc?k|bitch|shit|asshole|—Ö—É–π|—Å–æ—Å–∏|–∏–¥–∏–æ—Ç)/i, emoji: 'üö´' },
    // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    { pattern: /–¥—É–º–∞—é|–º—ã—Å–ª—å|–∏–¥–µ—è|suggest|–ø—Ä–µ–¥–ª–∞–≥–∞—é/i, emoji: 'üí°' },
    { pattern: /–≤–æ–ø—Ä–æ—Å|–∫—Ç–æ|—á—Ç–æ|–∑–∞—á–µ–º|–ø–æ—á–µ–º—É|–∫–∞–∫–æ–π|–∑–∞—á–µ–º|–∫–∞–∫|\?$/i, emoji: '‚ùì' },
    { pattern: /–æ—Ç–≤–µ—Ç|–æ–∫|ok|–∞–≥–∞|–ø–æ–Ω—è–ª|—è—Å–Ω–æ|–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å|–ø–æ–Ω/i, emoji: 'üëå' },
    { pattern: /–∂–¥–∞—Ç—å|–∂–¥–∏|–æ–∂–∏–¥–∞–Ω–∏–µ|–ø–æ–∑–∂–µ|–ø–æ–¥–æ–∂–¥–∏|wait/i, emoji: '‚è≥' },
    { pattern: /–¥–∞+|yes|—É–≥—É/i, emoji: '‚úÖ' },
    { pattern: /–Ω–µ—Ç+|–Ω–µ–∞|no+|never/i, emoji: '‚ùå' },
    // –ü—Ä–æ—â–∞–Ω–∏–µ
    { pattern: /–ø–æ–∫–∞|bye|–¥–æ –≤—Å—Ç—Ä–µ—á–∏|goodbye|—É–≤–∏–¥–∏–º|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|—Å—á–∞—Å—Ç–ª–∏–≤–æ|bb|bye bye/i, emoji: 'üëã' },
    // –ú–µ–º—ã/—à—É—Ç–∫–∏
    { pattern: /–º–µ–º|—à—É—Ç–∫–∞|joke|mem|—Ä–∂–æ–º–±–∞/i, emoji: 'üòè' },
    { pattern: /–æ—á—É+–º–µ–ª|–≤–æ—É|–æ—Ñ–∏–≥–µ—Ç—å|–æ—Ö—Ä–µ–Ω–µ—Ç—å|—Å–µ—Ä—å—ë–∑–Ω–æ|–∂–µ—Å—Ç—å|wild/i, emoji: 'üßê' },
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
    { pattern: /–±–æ—Ç|bot|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|ai|chatgpt/i, emoji: 'ü§ñ' },
];

export class MarkovService {
    private database: DatabaseService;
    private settingsService: SettingsService;
    private readonly customEmojiRe = /<a?:\w{2,}:\d{17,20}>/g;                 // –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    private readonly customEmojiTokenRe = /^<a?:\w{2,}:\d{17,20}>$/;           // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    private readonly uniEmojiRe = emojiRegex();                                // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Unicode-—ç–º–æ–¥–∑–∏
    private readonly uniEmojiTokenRe = new RegExp(`^(?:${emojiRegex().source})$`); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

    constructor(database: DatabaseService, settingsService: SettingsService) {
        this.database = database;
        this.settingsService = settingsService;
    }

    wrapText(ctx: CanvasRenderingContext2D, text: string, maxWidth: number, font: string): string[] {
      ctx.font = font;
      const words: string[] = text.split(' ').filter(Boolean);
      let lines: string[] = [];
      let currentLine: string = words.length > 0 ? words[0]! : '';
      for (let i = 1; i < words.length; i++) {
          const word: string = words[i] || '';
          const width = ctx.measureText(currentLine + ' ' + word).width;
          if (width < maxWidth) {
              currentLine += ' ' + word;
          } else {
              lines.push(currentLine);
              currentLine = word || '';
          }
      }
      if (currentLine !== '') lines.push(currentLine);
      return lines;
    }

    fitFontSize(ctx: CanvasRenderingContext2D, text: string, maxWidth: number, baseSize: number, fontFamily: string, minSize: number = 14): number {
      let fontSize = baseSize;
      ctx.font = `bold ${fontSize}px ${fontFamily}`;
      if (ctx.measureText(text).width <= maxWidth) return fontSize;
      while (fontSize > minSize) {
          ctx.font = `bold ${fontSize}px ${fontFamily}`;
          if (ctx.measureText(text).width <= maxWidth) break;
          fontSize -= 2;
      }
      return fontSize;
    } 

    async makeMultiImageMeme(imagePaths: string[], topText: string, bottomText: string): Promise<Buffer> {
      imagePaths = imagePaths.filter(p => p && typeof p === 'string' && fs.existsSync(p) && p.length > 0);
      if (!imagePaths.length) throw new Error('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–µ–º–∞');

      const images = await Promise.all(imagePaths.map(p => loadImage(p)));
      const width = images.reduce((sum, img) => sum + img.width, 0);
      const height = Math.max(...images.map(img => img.height));
      const canvas = createCanvas(width, height);
      const ctx = canvas.getContext('2d');
      let x = 0;
      for (const img of images) {
          ctx.drawImage(img, x, 0);
          x += img.width;
      }
  
      // -- –í–µ—Ä—Ö–Ω–∏–π –¢–ï–ö–°–¢ --
      let fontFamily = 'Impact';
      let maxTextWidth = width * 0.9;
      let topFontSize = this.fitFontSize(ctx, topText.toUpperCase(), maxTextWidth, 50, fontFamily, 14);
      let topLines = this.wrapText(ctx, topText.toUpperCase(), maxTextWidth, `bold ${topFontSize}px ${fontFamily}`);
      let topY = 40;
      ctx.textAlign = 'center';
      ctx.strokeStyle = 'black';
      ctx.fillStyle = 'white';
      ctx.lineWidth = 4;
      for (const line of topLines) {
          ctx.font = `bold ${topFontSize}px ${fontFamily}`;
          ctx.strokeText(line, width / 2, topY);
          ctx.fillText(line, width / 2, topY);
          topY += topFontSize + 5;
      }
  
      // -- –ù–∏–∂–Ω–∏–π –¢–ï–ö–°–¢ --
      let bottomFontSize = this.fitFontSize(ctx, bottomText.toUpperCase(), maxTextWidth, 50, fontFamily, 14);
      let bottomLines = this.wrapText(ctx, bottomText.toUpperCase(), maxTextWidth, `bold ${bottomFontSize}px ${fontFamily}`);
      let bottomY = height - bottomLines.length * bottomFontSize - 20;
      for (const line of bottomLines) {
          ctx.font = `bold ${bottomFontSize}px ${fontFamily}`;
          ctx.strokeText(line, width / 2, bottomY);
          ctx.fillText(line, width / 2, bottomY);
          bottomY += bottomFontSize + 5;
      }
  
      return canvas.toBuffer();
    }

    async makeOverlayMeme(mainPath: string, overlayPaths: string[], topText: string, bottomText: string): Promise<Buffer> {
      if (!mainPath || !fs.existsSync(mainPath)) throw new Error('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ' + mainPath);
      // –ì—Ä—É–∑–∏–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const mainImg = await loadImage(mainPath);
    
      // –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
      const canvas = createCanvas(mainImg.width, mainImg.height);
      const ctx = canvas.getContext('2d');
      ctx.drawImage(mainImg, 0, 0);
    
      // –ú–∞—Å—à—Ç–∞–± –∏ –ø–æ–∑–∏—Ü–∏—è –æ–≤–µ—Ä–ª–µ–µ–≤ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥ —Å–≤–æ–π —Å—Ç–∏–ª—å
      const overlaySize = Math.floor(mainImg.width * 0.45); // 45% —à–∏—Ä–∏–Ω—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–π
      let overlayY = Math.floor(mainImg.height * 0.15); // –ß—É—Ç—å –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è
      for (const path of overlayPaths) {
        const overlay = await loadImage(path);
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä—Ö, —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö –∏–ª–∏ –Ω–∏–∑)
        const overlayX = Math.floor(mainImg.width * 0.55);
        ctx.drawImage(overlay, overlayX, overlayY, overlaySize, overlaySize);
        overlayY += Math.floor(overlaySize * 1.1); // –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –≤—Ç–æ—Ä—É—é –∫–ª–∞–¥–µ–º –Ω–∏–∂–µ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
      }
    
      // –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: –∫—Ä—É–ø–Ω–æ, –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
      ctx.font = `bold ${Math.floor(mainImg.height * 0.08)}px Impact`;
      ctx.fillStyle = 'white';
      ctx.strokeStyle = 'black';
      ctx.textAlign = 'center';
      ctx.lineWidth = 2;
    
      // –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
      ctx.fillText(topText.toUpperCase(), mainImg.width / 2, Math.floor(mainImg.height * 0.09));
      ctx.strokeText(topText.toUpperCase(), mainImg.width / 2, Math.floor(mainImg.height * 0.09));
    
      // –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
      ctx.fillText(bottomText.toUpperCase(), mainImg.width / 2, mainImg.height - Math.floor(mainImg.height * 0.04));
      ctx.strokeText(bottomText.toUpperCase(), mainImg.width / 2, mainImg.height - Math.floor(mainImg.height * 0.04));
    
      return canvas.toBuffer();
    }

    async sendAIReply(message: Message, aiText: string): Promise<void> {
      try {
        const canSend = message.channel && message.channel.isTextBased() && message.channel.isSendable();
        const r = Math.random();
    
        if (!message.guildId) return;
    
        // --- –°–Ω–∞—á–∞–ª–∞: —à–∞–Ω—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É—á–∞–π–Ω–æ–π –ì–ò–§–ö–ò ---
        if (canSend && r < 0.07) { // –Ω–∞–ø—Ä–∏–º–µ—Ä, 7% —à–∞–Ω—Å –Ω–∞ –≥–∏—Ñ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
          // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ gif-—Ñ–∞–π–ª—ã –∏–∑ –ë–î
          const gifMetas = await this.database.MemeImage!.findAll({
            where: {
              guild_id: message.guildId,
              original_url: { [Op.like]: '%.gif' }
            },
            raw: true
          });
          
          if (gifMetas.length > 0) {
            const chosen = gifMetas[Math.floor(Math.random() * gifMetas.length)];
            if (chosen && chosen.original_url) {
              await message.channel.send({ content: chosen.original_url });
              return;
            }
          }
          // –µ—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –≥–∏—Ñ–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –º–µ–º-–ª–æ–≥–∏–∫—É –Ω–∏–∂–µ
        }
    
        // --- –ú–µ–º-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —à–∞–Ω—Å, —á—Ç–æ –±—É–¥–µ—Ç 1, 2 –∏–ª–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –º–µ–º–æ–≤ ---
        if (canSend && r < 0.13) {
          const count = Math.floor(Math.random() * 3) + 1;
          const imagePaths = await this.database.getRandomMemeImages(message.guildId, count)
            .then(arr => arr.filter(p => !p.toLowerCase().endsWith('.gif'))); // –∏—Å–∫–ª—é—á–∞–µ–º –≥–∏—Ñ–∫–∏, —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    
          if (imagePaths.length === 0) {

          } else if (imagePaths.length === 1) {
              const topText = (await this.generateResponse(message.guildId, message.channelId)) || 'AI MEME!';
              const bottomText = (await this.generateResponse(message.guildId, message.channelId)) || '';
              const buffer = await this.makeMultiImageMeme(imagePaths, topText, bottomText);
              const attachment = new AttachmentBuilder(buffer, { name: 'meme.png' });
              await message.channel.send({ files: [attachment] });
              return;
          } else {
              const overlayChance = 0.3; // 30%
              if (Math.random() < overlayChance) {
                  const [mainPath, ...overlays] = imagePaths;
                  const topText = (await this.generateResponse(message.guildId, message.channelId)) || '';
                  const bottomText = (await this.generateResponse(message.guildId, message.channelId)) || '';
                  const buffer = await this.makeOverlayMeme(mainPath!, overlays, topText, bottomText);
                  const attachment = new AttachmentBuilder(buffer, { name: 'meme_overlay.png' });
                  await message.channel.send({ files: [attachment] });
                  return;
              } else {
                  const topText = (await this.generateResponse(message.guildId, message.channelId)) || 'AI MEME!';
                  const bottomText = (await this.generateResponse(message.guildId, message.channelId)) || '';
                  const buffer = await this.makeMultiImageMeme(imagePaths, topText, bottomText);
                  const attachment = new AttachmentBuilder(buffer, { name: 'meme.png' });
                  await message.channel.send({ files: [attachment] });
                  return;
              }
          }
        }
    
        // --- –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç AI ---
        if (r < 0.43 && canSend) {
          await message.reply({
            content: aiText,
            allowedMentions: { repliedUser: true }
          });
          if (r < 0.2) await this.reactToMessageSmart(message);
        } else if (r < 0.83 && canSend) {
          await message.channel.send({ content: aiText });
        } else if (canSend) {
          await this.reactToMessageSmart(message);
        }
      } catch (error) {
        logger.error('sendAIReply error:', error);
      }
    }

    async reactToMessageSmart(message: Message): Promise<void> {
        try {
          const msg = message.content.toLowerCase();
      
          // 1. –ü–æ –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
          const found = emotionRules.find(r => r.pattern.test(msg));
          if (found) {
            await message.react(found.emoji);
            // –î–ª—è extra-—Ñ–ª–µ–∫—Å–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–º–µ—Ö–∞)
            if (/–∞—Ö–∞—Ö|–ª–æ–ª|haha|r–∂—É|funny/i.test(msg)) {
              await message.react('üòÇ');
              await message.react('ü§£');
            }
            // –î–ª—è –∂–µ—Å—Ç–∏ –∏ –∫—Ä–∏–Ω–∂–∞ ‚Äî –¥–≤–∞ emoji: –∫—Ä–∏–Ω–∂ + ü§¶‚Äç‚ôÇÔ∏è
            if (/–∫—Ä–∏–Ω–∂|cringe/i.test(msg)) {
              await message.react('ü§¶‚Äç‚ôÇÔ∏è');
            }
            // –î–ª—è –ø–æ–±–µ–¥ –∏ —É—Å–ø–µ—Ö–∞ ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            if (/—Ç–æ–ø|–ª—É—á—à–µ|–∫–ª–∞—Å—Å|—Ç–æ–ø—á–∏–∫|–ø–æ–±–µ–¥/i.test(msg)) {
              await message.react('ü•á');
            }
            // –î–ª—è —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤ ‚Äî –µ—â—ë ‚Äúüò∂‚Äù
            if (found.emoji === 'üö´') {
              await message.react('üò∂');
            }
            return;
          }
      
          // 2. –ü–æ–≤—Ç–æ—Ä—è–µ–º emoji —é–∑–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          const userEmojis = msg.match(/\p{Emoji}/gu) || [];
          if (userEmojis.length > 0 && userEmojis[0]) {
            await message.react(userEmojis[0]);
            return;
          }
          // 3. –ü–æ–∑–∏—Ç–∏–≤/–Ω–µ–≥–∞—Ç–∏–≤ –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
          let pos = 0, neg = 0;
          if (/(—Å—É–ø–µ—Ä|–º–æ–ª–æ–¥–µ—Ü|–æ—Ç–ª–∏—á–Ω–æ|—É–¥–∞—á–Ω–æ|–º–∏–ª–æ|–∫–ª–µ–≤–æ|good|nice|amazing|great|happy|–∏–∑–∏|gj)/i.test(msg)) pos++;
          if (/(–±—Ä–µ–¥|–¥–µ—Ñ–µ–∫—Ç|–æ—à–∏–±–∫–∞|fail|—Ñ–µ–π–ª|–ø–µ—á–∞–ª—å|–≥—Ä—É—Å—Ç—å|trouble|bad|poor|—Å–ª–∞–±–æ|–ø–µ—á–∞–ª—å–Ω–æ|–∂–µ—Å—Ç—å|–∫–∞–ø–µ—Ü|wtf)/i.test(msg)) neg++;
          if (pos > neg) await message.react('üòÉ');
          else if (neg > pos) await message.react('üò¢');
          else await message.react('ü§î');
        } catch (error) {
          logger.error('reactToMessageSmart error:', error);
        }
    }

    private STOPWORDS = new Set(['–∏', '–∞', '–Ω–æ', ',', '.', '!', '?', '-', '']);

    async trainFromMessage(guildId: string, channelId: string, content: string): Promise<void> {
      const settings = await this.settingsService.getGuildSettings(guildId);
      if (!settings.ai.enabled) return;
      if (!this.settingsService.shouldProcessAI(settings, channelId)) return;

      try {
          const tokens = this.tokenize(content);
          if (tokens.length < 3) return;
          for (let i = 0; i < tokens.length - 2; i++) {
              const prev = tokens[i];
              const curr = tokens[i + 1];
              const next = tokens[i + 2];
              if (!prev || !curr || !next) continue;
              await this.database.addMarkovBigram(guildId, prev, curr, next); // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Ç–≤–æ–∏–º–∏ addMarkovData
          }
          logger.debug(`Trained Markov bigram chain with ${tokens.length} tokens from guild ${guildId}`);
      } catch (error) {
          logger.error('Error training Markov bigram chain:', error);
      }
    }

    private async getRandomBigramStart(guildId: string): Promise<[string, string] | null> {
      const candidates: [string, string][] = await this.database.getBigramStartCandidates(guildId);
      // —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º!
      const filtered = candidates.filter(([prev, curr]: [string, string]) =>
          !this.STOPWORDS.has(curr) &&
          !this.STOPWORDS.has(prev)
      );
      if (filtered.length === 0) return null;
      const idx = Math.floor(Math.random() * filtered.length);
      return filtered[idx] ?? null;
    }

    async generateResponse(guildId: string, channelId: string): Promise<string | null> {
      const settings = await this.settingsService.getGuildSettings(guildId);
      if (!settings.ai.enabled) return null;
      if (!this.settingsService.shouldProcessAI(settings, channelId)) return null;
      const minWords = settings.ai.min_words ?? 3;
      const maxWords = settings.ai.max_words ?? 20;
  
      try {
          const startPair = await this.getRandomBigramStart(guildId);
          if (!startPair) return null;
          let [prev, curr] = startPair;
          const tokens: string[] = [prev, curr];
          for (let i = 0; i < maxWords - 2; i++) {
              const options = await this.database.getMarkovBigramOptions(guildId, prev, curr);
              if (!options || Object.keys(options).length === 0) break;
              // weighted random
              const next = this.weightedRandomChoiceBigram(options) || '';
              if (this.STOPWORDS.has(next)) break;
              tokens.push(next);
              prev = curr;
              curr = next;
              if (this.isEndWord(next)) break;
          }
          if (tokens.length < minWords) return null;
          // –£–º–Ω–∞—è —Å–∫–ª–µ–π–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
          let result = '';
          for (let i = 0; i < tokens.length; i++) {
              const t = tokens[i] || '';
              if (i > 0 && !/[.,!?-]/.test(t)) result += ' ';
              result += t;
          }
          return result;
      } catch (error) {
          logger.error('Error generating Markov bigram response:', error);
          return null;
      }
    }
  
    private tokenize(text: string): string[] {
      // 1) –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å—Å—ã–ª–∫–∏, @everyone/@here
      const cleaned = text
        .replace(/<@[!&]?\d+>/g, '')           // —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Ä–æ–ª–µ–π
        .replace(/https?:\/\/\S+/gi, '')       // —Å—Å—ã–ª–∫–∏
        .replace(/@(everyone|here)/gi, '');    // –º–∞—Å—Å–æ–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
  
      // 2) –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã: –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏, Unicode-—ç–º–æ–¥–∑–∏, —Å–ª–æ–≤–∞/—á–∏—Å–ª–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
      const pattern = new RegExp(
        `${this.customEmojiRe.source}|${this.uniEmojiRe.source}|[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]+|[.,!?-]+`,
        'g'
      );
      const tokens = cleaned.match(pattern) ?? [];
  
      // 3) –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —Ç–æ–ª—å–∫–æ ¬´—Å–ª–æ–≤–∞¬ª, —ç–º–æ–¥–∑–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
      return tokens.map(t =>
        (this.customEmojiTokenRe.test(t) || this.uniEmojiTokenRe.test(t)) ? t : t.toLowerCase()
      );
    }

    private weightedRandomChoiceBigram(options: { [next: string]: number }): string {
      const total = Object.values(options).reduce((s, v) => s + v, 0);
      let rand = Math.random() * total;
      for (const next in options) {
          rand -= options[next] ?? 0;
          if (rand <= 0) return next;
      }
      return Object.keys(options)[0] || '';
    }

    private isEndWord(word: string): boolean {
        return /^[.!?]$/.test(word); 
    }
}