import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder } from 'discord.js';
import { DiscordBot } from '../index';
import { Op } from 'sequelize';
import { SettingsService } from '../services/settings/SettingsService';
import { isUserAdmin } from '../utils/helpers';

export const data = new SlashCommandBuilder()
    .setName('level')
    .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ')
    .addSubcommand(subcommand =>
        subcommand
            .setName('me')
            .setDescription('–í–∞—à —É—Ä–æ–≤–µ–Ω—å')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('user')
            .setDescription('–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            .addUserOption(option =>
                option
                    .setName('target')
                    .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
                    .setRequired(true)
            )
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('leaderboard')
            .setDescription('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
            .addStringOption(option =>
                option
                  .setName('type')
                  .setDescription('–¢–∏–ø —Ç–æ–ø–∞')
                  .setRequired(true)
                  .addChoices(
                    { name: 'XP –∑–∞ –Ω–µ–¥–µ–ª—é', value: 'week' },
                    { name: 'XP –∑–∞ –º–µ—Å—è—Ü', value: 'month' },
                    { name: 'XP –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è', value: 'all' },
                    { name: '–ú–æ–Ω–µ—Ç—ã (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)', value: 'coins' },
                    { name: '–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç (–æ–±—â–µ–µ –≤—Ä–µ–º—è)', value: 'voice' }
                  )
            )
    )
    .addSubcommand(subcommand =>
        subcommand
          .setName('addxp')
          .setDescription('–î–æ–±–∞–≤–∏—Ç—å HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
          .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
          .addIntegerOption(opt => opt.setName('value').setDescription('–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å').setRequired(true))
    )
    .addSubcommand(subcommand =>
        subcommand
          .setName('setxp')
          .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
          .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
          .addIntegerOption(opt => opt.setName('value').setDescription('–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ').setRequired(true))
    )
    .addSubcommand(subcommand =>
        subcommand
          .setName('removexp')
          .setDescription('–í—ã—á–µ—Å—Ç—å HP —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
          .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
          .addIntegerOption(opt => opt.setName('value').setDescription('–°–∫–æ–ª—å–∫–æ –≤—ã—á–µ—Å—Ç—å').setRequired(true))
    )
    .addSubcommand(subcommand =>
        subcommand
          .setName('addcoins')
          .setDescription('–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
          .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
          .addIntegerOption(opt => opt.setName('value').setDescription('–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å').setRequired(true))
    )
    .addSubcommand(subcommand =>
        subcommand
          .setName('setcoins')
          .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
          .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
          .addIntegerOption(opt => opt.setName('value').setDescription('–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ').setRequired(true))
    )
    .addSubcommand(subcommand =>
        subcommand
          .setName('removecoins')
          .setDescription('–í—ã—á–µ—Å—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
          .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
          .addIntegerOption(opt => opt.setName('value').setDescription('–°–∫–æ–ª—å–∫–æ –≤—ã—á–µ—Å—Ç—å').setRequired(true))
    );

export async function execute(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    const subcommand = interaction.options.getSubcommand();
    const settingsService = new SettingsService(bot.database, bot.redis);
    const settings = await settingsService.getGuildSettings(interaction.guild!.id);

    if (['addxp', 'setxp', 'removexp', 'addcoins', 'setcoins', 'removecoins'].includes(subcommand)) {
      const admin = settings.admin ?? { roles: [], users: [] };
      if (!isUserAdmin(interaction, admin)) {
        const embed = new EmbedBuilder()
          .setColor('#eb4034')
          .setTitle('–û—à–∏–±–∫–∞')
          .setDescription('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!')
          .setFooter({ text: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.' });
        await interaction.reply({ embeds: [embed], ephemeral: true });
        return;
      }
    }

    if (!settings.levels.enabled) {
      const embed = new EmbedBuilder()
          .setColor('#eb4034')
          .setTitle('–û—à–∏–±–∫–∞')
          .setDescription('‚ùå –£—Ä–æ–≤–Ω–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.')
          .setFooter({ text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É —É—Ä–æ–≤–Ω–µ–π.' });
      await interaction.reply({ embeds: [embed], ephemeral: true});
      return;
    }

    switch (subcommand) {
        case 'me':
            await showUserLevel(interaction, bot, interaction.user.id);
            break;
        case 'user':
            const target = interaction.options.getUser('target', true);
            await showUserLevel(interaction, bot, target.id);
            break;
        case 'leaderboard': 
            const type = interaction.options.getString('type', true);
            if (type === 'week')      await showXPLeaderboard(interaction, bot, 'week');
            else if (type === 'month')await showXPLeaderboard(interaction, bot, 'month');
            else if (type === 'all')  await showXPLeaderboard(interaction, bot, 'all');
            else if (type === 'coins')await showCoinLeaderboard(interaction, bot);
            else if (type === 'voice')await showVoiceLeaderboard(interaction, bot);
            break;
        case 'addhp':
            await changeUserXp(interaction, bot, 'add');
            break;
        case 'sethp':
            await changeUserXp(interaction, bot, 'set');
            break;
        case 'removehp':
            await changeUserXp(interaction, bot, 'remove');
            break;
        case 'addcoins':
            await changeUserCoins(interaction, bot, 'add');
            break;
        case 'setcoins':
            await changeUserCoins(interaction, bot, 'set');
            break;
        case 'removecoins':
            await changeUserCoins(interaction, bot, 'remove');
            break;
    }
}

async function changeUserXp(interaction: ChatInputCommandInteraction, bot: DiscordBot, mode: 'add' | 'set' | 'remove') {
    const db = bot.database;
    if (!db.User) {
      const embed = new EmbedBuilder()
        .setColor('#eb4034')
        .setTitle('–û—à–∏–±–∫–∞')
        .setDescription('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')

      await interaction.reply({ embeds: [embed], ephemeral: true});
      return;
    }
    const user = interaction.options.getUser('user', true);
    const value = interaction.options.getInteger('value', true);
  
    const dbUser = await db.User.findByPk(user.id);
    if (!dbUser) {
        const embed = new EmbedBuilder()
        .setColor('#eb4034')
        .setTitle('–û—à–∏–±–∫–∞')
        .setDescription('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ')

        await interaction.reply({ embeds: [embed], ephemeral: true});
        return;
    }

    let description = '';
    let newXp = dbUser.xp ?? 0;
    let color = 0x00b894; // default green
  
    if (mode === 'add') {
      await db.updateUserXP(user.id, value); // –ü—Ä–∏–±–∞–≤–∏—Ç—å value
      const updated = await db.getUser(user.id);
      newXp = updated?.xp ?? (newXp + value);
      description = `‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${user.id}> **–¥–æ–±–∞–≤–ª–µ–Ω–æ** **${value}** XP!\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **${newXp}**`;
      color = 0x00b894;
    } else if (mode === 'remove') {
      await db.updateUserXP(user.id, -value); // –í—ã—á–µ—Å—Ç—å value
      const updated = await db.getUser(user.id);
      newXp = updated?.xp ?? Math.max(newXp - value, 0);
      description = `‚ú® –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${user.id}> **–≤—ã—á—Ç–µ–Ω–æ** **${value}** XP!\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **${newXp}**`;
      color = 0x00b894;
    } else if (mode === 'set') {
      await db.setUserXP(user.id, value);
      newXp = value;
      description = `‚ú® XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${user.id}> **—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω** **${newXp}** –º–æ–Ω–µ—Ç!`;
      color = 0x00b894;
    }

    const embed = new EmbedBuilder()
    .setColor(color)
    .setTitle('üíæ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω—ã')
    .setThumbnail(user.displayAvatarURL())
    .setDescription(description)

    await interaction.reply({ embeds: [embed], allowedMentions: { users: [] } });
}
  
async function changeUserCoins(interaction: ChatInputCommandInteraction,bot: DiscordBot,mode: 'add' | 'set' | 'remove') {
    const db = bot.database;
    
    if (!db.User) {
      const embed = new EmbedBuilder()
      .setColor('#eb4034')
      .setTitle('–û—à–∏–±–∫–∞')
      .setDescription('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')

      await interaction.reply({ embeds: [embed], ephemeral: true});
      return;
    }

    const user = interaction.options.getUser('user', true);
    const value = interaction.options.getInteger('value', true);
  
    const dbUser = await db.User.findByPk(user.id);
    if (!dbUser) {
      const embed = new EmbedBuilder()
      .setColor('#eb4034')
      .setTitle('–û—à–∏–±–∫–∞')
      .setDescription('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ')

      await interaction.reply({ embeds: [embed], ephemeral: true});
      return;
    }

    let description = '';
    let newCoins = dbUser.coins ?? 0;
    let color = 0x00b894; // default green
  
    if (mode === 'add') {
      await db.updateUserCoins(user.id, value);
      const newUser = await db.getUser(user.id);
      newCoins = newUser?.coins ?? newCoins;
      description = `üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${user.id}> **–¥–æ–±–∞–≤–ª–µ–Ω–æ** **${value}** –º–æ–Ω–µ—Ç!\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **${newCoins}**`;
      color = 0x00b894;
    } else if (mode === 'remove') {
      await db.updateUserCoins(user.id, -value);
      const newUser = await db.getUser(user.id);
      newCoins = newUser?.coins ?? newCoins;
      description = `ü™ô –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${user.id}> **–≤—ã—á—Ç–µ–Ω–æ** **${value}** –º–æ–Ω–µ—Ç.\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **${newCoins}**`;
      color = 0xfdcb6e;
    } else if (mode === 'set') {
      await db.setUserCoins(user.id, value);
      newCoins = value;
      description = `üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${user.id}> **—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω** –Ω–∞ **${newCoins}** –º–æ–Ω–µ—Ç.`;
      color = 0x0984e3;
    }
  
    const embed = new EmbedBuilder()
      .setColor(color)
      .setTitle('üíæ –ú–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω—ã')
      .setThumbnail(user.displayAvatarURL())
      .setDescription(description)

    await interaction.reply({ embeds: [embed], allowedMentions: { users: [] } });
}

async function showUserLevel(interaction: ChatInputCommandInteraction, bot: DiscordBot, userId: string) {
    await interaction.deferReply();
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await bot.database.getUser(userId);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî —Å–æ–∑–¥–∞—ë–º
        if (!user) {
            const discordUser = await bot.client.users.fetch(userId);
            await bot.database.createUser(userId, discordUser.username);
            user = await bot.database.getUser(userId);
        }

        const guildId = interaction.guild!.id;
        const settingsService = new SettingsService(bot.database, bot.redis);
        const settings = await settingsService.getGuildSettings(guildId);

        const discordUser = await bot.client.users.fetch(userId);
        const currentXP = user.xp;
        const currentLevel = user.level;
        const coinsAmount = user.coins;
        const streak = user.streak ?? 0;
        const battlepass = user.battle_pass_level ?? 1;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        const xpForCurrentLevel = Math.pow(currentLevel - 1, 2) * 100;
        const xpForNextLevel = Math.pow(currentLevel, 2) * 100;
        const progressXP = currentXP - xpForCurrentLevel;
        const neededXP = xpForNextLevel - xpForCurrentLevel;
        const progressPercent = Math.floor((progressXP / neededXP) * 100);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressBar = createProgressBar(progressPercent);
        
        const embed = new EmbedBuilder()
            .setColor('#00BFFF')
            .setTitle(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${discordUser.username}`)
            .setThumbnail(discordUser.displayAvatarURL())
            .addFields([
                { name: 'üèÜ –£—Ä–æ–≤–µ–Ω—å', value: `${currentLevel}`, inline: true },
                { name: '‚≠ê –û–ø—ã—Ç', value: `${currentXP} XP`, inline: true },
                { name: `${settings.economy.currency_emoji} ${settings.economy.currency_name}`, value: `${coinsAmount}`, inline: true },
                { name: 'üî• –°–µ—Ä–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö', value: `${streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`, inline: true },
                { name: 'üî∞ –£—Ä–æ–≤–µ–Ω—å BattlePass', value: `${battlepass}`, inline: true },
                { name: 'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å', value: `${progressBar} ${progressPercent}%\n${progressXP}/${neededXP} XP –¥–æ ${currentLevel + 1} —É—Ä–æ–≤–Ω—è` }
            ])
            .setFooter({ text: `ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}` });
        
        await interaction.editReply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Error showing user level:', error);
        await interaction.editReply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.' });
    }
}

async function showXPLeaderboard(interaction: ChatInputCommandInteraction, bot: DiscordBot, period: 'week' | 'month' | 'all') {
    await interaction.deferReply();
    if (!bot.database.User) {
        const embed = new EmbedBuilder()
        .setColor('#eb4034')
        .setTitle('–û—à–∏–±–∫–∞')
        .setDescription('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  
        await interaction.reply({ embeds: [embed], ephemeral: true});
        return;
    }
  
    let topUsers;
    let periodName;
    if (period === 'week') {
      const now = new Date();
      const from = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);
      periodName = '–∑–∞ –Ω–µ–¥–µ–ª—é';
      topUsers = await bot.database.User.findAll({
        where: { updatedAt: { [Op.gte]: from } },
        order: [['level', 'DESC'], ['xp', 'DESC']],
        limit: 10,
        raw: true,
      });
    } else if (period === 'month') {
      const now = new Date();
      const from = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30);
      periodName = '–∑–∞ –º–µ—Å—è—Ü';
      topUsers = await bot.database.User.findAll({
        where: { updatedAt: { [Op.gte]: from } },
        order: [['level', 'DESC'], ['xp', 'DESC']],
        limit: 10,
        raw: true,
      });
    } else { // 'all'
      periodName = '–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è';
      topUsers = await bot.database.User.findAll({
        order: [['level', 'DESC'], ['xp', 'DESC']],
        limit: 10,
        raw: true,
      });
    }
  
    let description = '';
    const medals = ['ü•á', 'ü•à', 'ü•â'];
    for (let i = 0; i < topUsers.length; i++) {
      const user = topUsers[i];
      const medal = medals[i] || `${i + 1}.`;
      try {
        const discordUser = await bot.client.users.fetch(user!.id);
        description += `${medal} **${discordUser.username}** ‚Äî –£—Ä–æ–≤–µ–Ω—å ${user!.level} (${user!.xp} XP)\n`;
      } catch {
        description += `${medal} **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å** ‚Äî –£—Ä–æ–≤–µ–Ω—å ${user!.level} (${user!.xp} XP)\n`;
      }
    }
  
    const embed = new EmbedBuilder()
      .setColor('#f1c40f')
      .setTitle(`üèÜ –¢–û–ü –ø–æ —É—Ä–æ–≤–Ω—é ${periodName}`)
      .setDescription(description || '*–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞*')
      .setFooter({ text: `–í—Å–µ–≥–æ: ${topUsers.length}` });
  
    await interaction.editReply({ embeds: [embed] });
}

async function showCoinLeaderboard(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    await interaction.deferReply();
    if (!bot.database.User) {
        const embed = new EmbedBuilder()
        .setColor('#eb4034')
        .setTitle('–û—à–∏–±–∫–∞')
        .setDescription('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  
        await interaction.reply({ embeds: [embed], ephemeral: true});
        return;
    }
  
    const topUsers = await bot.database.User.findAll({
      order: [['coins', 'DESC']],
      limit: 10,
      raw: true,
    });

    const guildId = interaction.guild!.id;
    const settingsService = new SettingsService(bot.database, bot.redis);
    const settings = await settingsService.getGuildSettings(guildId);
  
    let description = '';
    const medals = ['ü•á', 'ü•à', 'ü•â'];
    for (let i = 0; i < topUsers.length; i++) {
      const user = topUsers[i];
      const medal = medals[i] || `${i+1}.`;
      try {
        const discordUser = await bot.client.users.fetch(user!.id);
        description += `${medal} **${discordUser.username}** ‚Äî ${user!.coins} ${settings.economy.currency_name}\n`;
      } catch {
        description += `${medal} **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å** ‚Äî ${user!.coins} ${settings.economy.currency_name}\n`;
      }
    }
  
    const embed = new EmbedBuilder()
      .setColor('#e67e22')
      .setTitle(`üí∞ –¢–û–ü –ø–æ ${settings.economy.currency_name} (–≤—Å–µ–≥–æ)`)
      .setDescription(description || '*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*')
      .setFooter({ text: `–í—Å–µ–≥–æ: ${topUsers.length}` });
  
    await interaction.editReply({ embeds: [embed] });
}

async function showVoiceLeaderboard(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
  await interaction.deferReply();
  if (!bot.database.User) {
    const embed = new EmbedBuilder()
      .setColor('#eb4034')
      .setTitle('–û—à–∏–±–∫–∞')
      .setDescription('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    await interaction.reply({ embeds: [embed], ephemeral: true});
    return;
  }

  const topUsers = await bot.database.User.findAll({
    order: [['voice_time', 'DESC']],
    limit: 10,
    raw: true,
  });

  let description = '';
  const medals = ['ü•á', 'ü•à', 'ü•â'];
  for (let i = 0; i < topUsers.length; i++) {
    const user = topUsers[i];
    const medal = medals[i] || `${i+1}.`;
    try {
      const discordUser = await bot.client.users.fetch(user!.id);
      description += `${medal} **${discordUser.username}** ‚Äî ${(user!.voice_time / 60).toFixed(1)} –º–∏–Ω.\n`;
    } catch {
      description += `${medal} **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å** ‚Äî ${(user!.voice_time / 60).toFixed(1)} –º–∏–Ω.\n`;
    }
  }

  const embed = new EmbedBuilder()
    .setColor('#0984e3')
    .setTitle('üé§ –¢–û–ü –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ')
    .setDescription(description || '*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*')
    .setFooter({ text: `–í—Å–µ–≥–æ: ${topUsers.length}` });

  await interaction.editReply({ embeds: [embed] });
}

function createProgressBar(percent: number, length: number = 20): string {
    const filled = Math.floor((percent / 100) * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}
