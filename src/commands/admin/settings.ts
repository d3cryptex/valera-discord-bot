import { 
    Interaction,
    StringSelectMenuInteraction,
    SlashCommandBuilder, 
    ChatInputCommandInteraction, 
    EmbedBuilder, 
    ActionRowBuilder, 
    StringSelectMenuBuilder,
    ButtonBuilder,
    ButtonStyle,
    ComponentType,
    ChannelType,
    PermissionFlagsBits,
    TextChannel,
    VoiceChannel,
    Role,
    User as DiscordUser,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    ButtonInteraction, 
    Collection,
    InteractionType
} from 'discord.js';
import { DiscordBot } from '../../index';
import { SettingsService } from '../../services/settings/SettingsService';
import { logger } from '../../utils/logger';
import { channel } from 'diagnostics_channel';

const activeCollectors = new Map<string, any>();

export const data = new SlashCommandBuilder()
    .setName('settings')
    .setDescription('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');

export async function execute(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    const settingsService = new SettingsService(bot.database, bot.redis);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    const member = interaction.member as any;
    const guildSettings = await settingsService.getGuildSettings(interaction.guild!.id);
    if (!await settingsService.hasPermission(member, guildSettings)) {
        const embed = new EmbedBuilder()
            .setColor('#FF0000')
            .setTitle('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            .setDescription('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n' +
                '**–ö—Ç–æ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:**\n' +
                '‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞\n' +
                '‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ Administrator\n' +
                '‚Ä¢ –†–æ–ª–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞');
        await interaction.reply({ embeds: [embed], ephemeral: true });
        return;
    }
    
    await showAllSettings(interaction, bot, settingsService);
}    

async function showAllSettings(interaction: ChatInputCommandInteraction, bot: DiscordBot, settingsService: SettingsService) {
    if (interaction.isButton()) {
        const i = interaction as ButtonInteraction;
        if (!i.deferred && !i.replied) {
          await i.deferUpdate();
        }
    } else if (interaction.isStringSelectMenu()) {
        const i = interaction as StringSelectMenuInteraction;
        if (!i.deferred && !i.replied) {
            await i.deferUpdate();
        }
    } else if (interaction.isChatInputCommand()) {
        const i = interaction as ChatInputCommandInteraction;
        if (!i.deferred && !i.replied) {
            await i.deferReply();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild!.id);
        
        const embed = new EmbedBuilder()
            .setColor('#0099FF')
            .setTitle('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞')
            .setDescription(`–û–±–∑–æ—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è **${interaction.guild!.name}**`)
            .addFields([
                {
                    name: 'üìä –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π',
                    value: `‚Ä¢ –°–∏—Å—Ç–µ–º–∞: ${settings.levels.enabled ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –û–ø—ã—Ç –∑–∞ —Ç–µ–∫—Å—Ç: ${settings.levels.text_xp ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –û–ø—ã—Ç –∑–∞ –≤–æ–π—Å: ${settings.levels.voice_xp ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å XP: \`${settings.levels.xp_multiplier}x\``,
                    inline: true
                },
                {
                    name: 'ü§ñ AI-—á–∞—Ç',
                    value: `‚Ä¢ –°–∏—Å—Ç–µ–º–∞: ${settings.ai.enabled ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: \`${(settings.ai.response_chance * 100)}%\`\n` +
                           `‚Ä¢ –ö—É–ª–¥–∞—É–Ω: \`${settings.ai.cooldown}—Å\`\n` +
                           `‚Ä¢ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: \`${settings.ai.min_words}-${settings.ai.max_words} —Å–ª–æ–≤\``,
                    inline: true
                },
                {
                    name: 'üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞',
                    value: `‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω: ${settings.economy.shop_enabled ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –ï–∂–µ–¥. –±–æ–Ω—É—Å: ${settings.economy.daily_bonus_enabled ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞: \`–û—Ç ${settings.economy.daily_bonus_max} –¥–æ ${settings.economy.daily_bonus_min} –º–æ–Ω–µ—Ç\`\n` +
                           `‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω: \`${settings.economy.prices_multiplier}x\``,
                    inline: true
                },
                {
                    name: 'üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    value: `‚Ä¢ –ê–¥–º–∏–Ω —Ä–æ–ª–µ–π: \`${settings.admin.roles.length}\`\n` +
                           `‚Ä¢ –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${settings.admin.users.length}\`\n`,
                    inline: true
                },
                {
                    name: 'üì¢ –ö–∞–Ω–∞–ª—ã',
                    value: `‚Ä¢ AI-–∫–∞–Ω–∞–ª—ã: \`${settings.ai.channels.length || 'üåê –í—Å–µ'}\`\n` +
                           `‚Ä¢ –ö–∞–Ω–∞–ª—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ XP: \`${settings.levels.xp_text.length || 'üåê –í—Å–µ'}\`\n` +
                           `‚Ä¢ –ö–∞–Ω–∞–ª—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ XP: \`${settings.levels.xp_voice.length || 'üåê –í—Å–µ'}\`\n` +
                           `‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: \`${settings.levels.ignored.length != 0 ? settings.levels.ignored.length : '‚ùå –ù–µ—Ç—É'}\``,
                    inline: true
                },
                {
                    name: 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è',
                    value: `‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä.: ${settings.moderation.enabled ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: ${settings.moderation.spam_protection ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞: ${settings.moderation.profanity_filter ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}`,
                    inline: true
                }
            ])
            .addFields([
                {
                    name: 'üìù –°–æ–æ–±—â–µ–Ω–∏—è',
                    value: `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏: ${settings.levels.levelup_messages ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                           `‚Ä¢ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: \`${settings.levels.levelup_channel ? `<#${settings.levels.levelup_channel}>` : 'üóíÔ∏è –¢–∞–º –∂–µ'}\`\n`,
                    inline: true
                },
                {
                    name: 'üî∞ BattlePass',
                    value: 
                      `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${settings.battlepass.enabled ? '`üü¢ –í–∫–ª.`' : '`üî¥ –í—ã–∫–ª`'}\n` +
                      `‚Ä¢ –£—Ä–æ–≤–Ω–µ–π: \`${settings.battlepass.levels}\`\n` +
                      `‚Ä¢ XP –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`${settings.battlepass.xp_for_level || '100'}\`\n` +
                      `‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á: \`${settings.battlepass.daily_quests?.length ?? 0}\`\n` +
                      `‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: \`${settings.battlepass.weekly_quests?.length ?? 0}\`\n` +
                      `‚Ä¢ –ù–∞–≥—Ä–∞–¥: \`${settings.battlepass.rewards?.length ?? 0}\``,
                    inline: true
                }
            ])
            .setFooter({ 
                text: `–í–µ—Ä—Å–∏—è: ${settings.system.version} | –Ø–∑—ã–∫: ${settings.system.language} | –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${settings.system.timezone}`,
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();

        const selectMenu = new ActionRowBuilder<StringSelectMenuBuilder>()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('settings_category_select')
                    .setPlaceholder('üéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .addOptions([
                        {
                            label: '–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π',
                            value: 'levels',
                            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—ã—Ç–∞ –∏ —É—Ä–æ–≤–Ω–µ–π',
                            emoji: 'üìä'
                        },
                        {
                            label: 'AI-—á–∞—Ç',
                            value: 'ai',
                            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                            emoji: 'ü§ñ'
                        },
                        {
                            label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
                            value: 'admin',
                            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞',
                            emoji: 'üëÆ'
                        },
                        {
                            label: '–≠–∫–æ–Ω–æ–º–∏–∫–∞',
                            value: 'economy',
                            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –±–æ–Ω—É—Å–æ–≤',
                            emoji: 'üí∞'
                        },
                        {
                            label: 'BattlePass',
                            value: 'battlepass',
                            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ battlepass',
                            emoji: 'üî∞'
                        },
                        {
                            label: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
                            value: 'moderation',
                            description: '–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã',
                            emoji: 'üõ°Ô∏è'
                        },
                        {
                            label: '–°–∏—Å—Ç–µ–º–∞',
                            value: 'system',
                            description: '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
                            emoji: '‚öôÔ∏è'
                        },
                        {
                            label: '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                            value: 'reset',
                            description: '–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞',
                            emoji: 'üîÅ'
                        }
                    ])
            );

        let targetMessage: any;

        if (interaction.isButton() || interaction.isStringSelectMenu()) {
            const i = interaction as ButtonInteraction | StringSelectMenuInteraction;
            
            // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            await i.message.edit({
                embeds: [embed],
                components: [selectMenu],
            });
            
            targetMessage = i.message;
        } else {
            const i = interaction as ChatInputCommandInteraction;
            
            // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
            await i.editReply({
                embeds: [embed],
                components: [selectMenu],
            });
            
            targetMessage = await i.fetchReply();
        }
        
        // –¥–∞–ª–µ–µ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞ targetMessage –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const collector = targetMessage.createMessageComponentCollector({
            componentType: ComponentType.StringSelect,
            time: 300000,
        });

        if (activeCollectors.has(interaction.user.id)) {
            activeCollectors.get(interaction.user.id).stop('new_menu');
            activeCollectors.delete(interaction.user.id);
        }
        activeCollectors.set(interaction.user.id, collector);

        collector.on('collect', async (selectInteraction: StringSelectMenuInteraction) => {
            if (activeCollectors.has(interaction.user.id)) {
                activeCollectors.get(interaction.user.id).stop('collected');
                activeCollectors.delete(interaction.user.id);
            }

            if (selectInteraction.user.id !== interaction.user.id) {
                await selectInteraction.reply({ 
                    content: '‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é.',
                    ephemeral: true
                });
                return;
            }

            const category = selectInteraction.values[0];
            
            try {
                switch (category) {
                    case 'levels':
                        await showLevelSettings(selectInteraction, bot, settingsService);
                        break;
                    case 'ai':
                        await showAISettings(selectInteraction, bot, settingsService);
                        break;
                    case 'admin':
                        await showAdminSettings(selectInteraction, bot, settingsService);
                        break;
                    case 'economy':
                        await showEconomySettings(selectInteraction, bot, settingsService);
                        break;
                    case 'battlepass':
                        await showBattlePassSettings(selectInteraction, bot, settingsService);
                        break;
                    case 'moderation':
                        await showModerationSettings(selectInteraction, bot, settingsService);
                        break;
                    case 'system':
                        await showSystemSettings(selectInteraction, bot, settingsService);
                        break;
                    case 'reset':
                        await resetSettings(selectInteraction, bot, settingsService);
                        break;
                }
            } catch (error) {
                logger.error('Error handling settings category:', error);
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if (!selectInteraction.replied && !selectInteraction.deferred) {
                    await selectInteraction.reply({
                        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
                        ephemeral: true
                    });
                }
            }
        });

        collector.on('end', async () => {
            try {
                await (interaction as ChatInputCommandInteraction).editReply({ components: [] });
              } catch {}
        });

    } catch (error) {
        logger.error('Error showing all settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
            components: [] 
        });
    }
}

async function showLevelSettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {    
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild.id);
        
        const embed = new EmbedBuilder()
            .setColor('#00BFFF') // –ì–æ–ª—É–±–æ–π –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–æ-—Å—Ç–∏–ª—è
            .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π')
            .addFields([
                {
                name: '‚öíÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
                value:
                    `**–°–∏—Å—Ç–µ–º–∞**: ${settings.levels.enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω–∞`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞`'}\n`
                + `**–û–ø—ã—Ç –≤ —á–∞—Ç–∞—Ö:** ${settings.levels.text_xp ? '`üü¢ –í–∫–ª—é—á–µ–Ω`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω`'}\n`
                + `**–û–ø—ã—Ç –≤ –≤–æ–π—Å–µ:** ${settings.levels.voice_xp ? '`üü¢ –í–∫–ª—é—á–µ–Ω`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω`'}\n`
                + `**–õ–µ–≤–µ–ª–∞–ø-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** ${settings.levels.levelup_messages ? '`üü¢ –í–∫–ª—é—á–µ–Ω`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω`'}\n`
                + `**–ú–∏–Ω. —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:** \`${settings.levels.min_message_length} —Å–∏–º–≤–æ–ª(–æ–≤)\``,
                inline: true
                },
                {
                name: '‚öôÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã',
                value:
                    `**–¢–µ–∫—Å—Ç XP:** \`${settings.levels.xp_multiplier}x\`\n`  
                     + `**–í–æ–π—Å XP:** \`${settings.levels.voice_xp_multiplier}x\`\n`
                     + `**–ú–æ–Ω–µ—Ç:** \`${settings.levels.coins_multiplier}x\``,
                inline: true,
                },
                {
                name: 'üì¢ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                value:
                    settings.levels.levelup_channel
                    ? `<#${settings.levels.levelup_channel}>`
                    : '_–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª_',
                inline: false,
                },
                {
                name: 'üóÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
                value:
                    `**–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã:** \`${settings.levels.xp_text.length ? settings.levels.xp_text.length : 'üåê –í—Å–µ\`'}\n`
                + `**–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã:** \`${settings.levels.xp_voice.length ? settings.levels.xp_voice.length : 'üåê –í—Å–µ\`'}\n`
                + `**–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:** \`${settings.levels.ignored.length != 0 ? settings.levels.ignored.length : '‚ùå –ù–µ—Ç—É\`'}\n`
                + `**–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ä–æ–ª–∏:** \`${settings.levels.ignored_roles.length != 0 ? settings.levels.ignored_roles.length : '‚ùå –ù–µ—Ç—É\`'}\n`
                + `**–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** \`${settings.levels.ignored_users.length != 0 ? settings.levels.ignored_users.length : '‚ùå –ù–µ—Ç—É\`'}\n`,
                inline: false
                }
            ])
            .setFooter({
                text: '‚ÑπÔ∏è –ó–¥–µ—Å—å –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–í–∫–ª—é—á–∞–π—Ç–µ/–æ—Ç–∫–ª—é—á–∞–π—Ç–µ XP, —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–ø—ã—Ç–∞.'
            });

        const buttons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('toggle_levels_system')
                    .setLabel(settings.levels.enabled ? '–í—ã–∫–ª. —Å–∏—Å—Ç–µ–º—É' : '–í–∫–ª. —Å–∏—Å—Ç–µ–º—É')
                    .setStyle(settings.levels.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
                    .setEmoji(settings.levels.enabled ? 'üî¥' : 'üü¢'),
                new ButtonBuilder()
                    .setCustomId('toggle_text_xp')
                    .setLabel(settings.levels.text_xp ? '–í—ã–∫–ª. —Ç–µ–∫—Å—Ç XP' : '–í–∫–ª. —Ç–µ–∫—Å—Ç XP')
                    .setStyle(settings.levels.text_xp ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('üí¨')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('toggle_voice_xp')
                    .setLabel(settings.levels.voice_xp ? '–í—ã–∫–ª. –≤–æ–π—Å XP' : '–í–∫–ª. –≤–æ–π—Å XP')
                    .setStyle(settings.levels.voice_xp ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('üé§')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('toggle_levelup_notifications')
                    .setLabel(settings.levels.levelup_messages ? '–í—ã–∫–ª. –ª–µ–≤–µ–ª–∞–ø-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–í–∫–ª. –ª–µ–≤–µ–ª–∞–ø-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                    .setStyle(settings.levels.levelup_messages ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji(settings.levels.levelup_messages ? 'üîï' : 'üîî')
                    .setDisabled(!settings.levels.enabled),
            );

        const buttons2 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('set_min_text_xp')
                    .setLabel('–ú–∏–Ω. —Å–ª–æ–≤ –¥–ª—è XP')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚úíÔ∏è')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('set_xp_text_multiplier')
                    .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–µ–∫—Å—Ç XP')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üí¨')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('set_xp_voice_multiplier')
                    .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤–æ–π—Å XP')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üéôÔ∏è')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('set_coins_multiplier')
                    .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('ü™ô')
                    .setDisabled(!settings.levels.enabled),
            );

        const buttons3 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('set_levelup_channel')
                    .setLabel('–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üì¢')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('manage_text_xp_channels')
                    .setLabel('–¢–µ–∫—Å—Ç XP –∫–∞–Ω–∞–ª—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üí¨')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('manage_voice_xp_channels')
                    .setLabel('–í–æ–π—Å XP –∫–∞–Ω–∞–ª—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üé§')
                    .setDisabled(!settings.levels.enabled)
            );

        const buttons4 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('manage_ignored_channels')
                    .setLabel('–ò–≥–Ω–æ—Ä. –∫–∞–Ω–∞–ª—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üö´')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('manage_ignored_roles')
                    .setLabel('–ò–≥–Ω–æ—Ä. —Ä–æ–ª–∏')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üóÇÔ∏è')
                    .setDisabled(!settings.levels.enabled),
                new ButtonBuilder()
                    .setCustomId('manage_ignored_users')
                    .setLabel('–ò–≥–Ω–æ—Ä. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üë§')
                    .setDisabled(!settings.levels.enabled)
            );

        const buttons5 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('reset_levels')
                    .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîÅ'),
                new ButtonBuilder()
                    .setCustomId('back_to_main')
                    .setLabel('–ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîô')
            );

        await interaction.editReply({ embeds: [embed], components: [buttons, buttons2, buttons3, buttons4, buttons5] });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        setupButtonCollector(interaction, bot, settingsService, 'levels');

    } catch (error) {
        logger.error('Error showing level settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Ä–æ–≤–Ω–µ–π.',
            components: [] 
        });
    }
}

async function showAISettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild.id);
        
        const embed = new EmbedBuilder()
            .setColor('#9932CC')
            .setTitle('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI-—á–∞—Ç–∞')
            .setDescription('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Markov Chain')
            .addFields([
                {
                    name: '‚öíÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                    value: `‚Ä¢ **AI-—á–∞—Ç:** ${settings.ai.enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω`'}\n` +
                           `‚Ä¢ **–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞:** \`${(settings.ai.response_chance * 100).toFixed(1)}%\`\n` +
                           `‚Ä¢ **–ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏:** \`${settings.ai.cooldown} —Å–µ–∫—É–Ω–¥\``,
                    inline: false
                },
                {
                    name: 'üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                    value: `‚Ä¢ **–ú–∏–Ω–∏–º—É–º —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ:** \`${settings.ai.min_words}\`\n` +
                           `‚Ä¢ **–ú–∞–∫—Å–∏–º—É–º —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ:** \`${settings.ai.max_words}\``,
                    inline: true
                },
                {
                    name: 'üì¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã',
                    value: `‚Ä¢ **AI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤:** \`${settings.ai.channels.length ? `${settings.ai.channels.length} –∫–∞–Ω–∞–ª–∞—Ö` : 'üåê –í—Å–µ'}\`\n` +
                           `‚Ä¢ **–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:** \`${settings.ai.ignored_channels.length != 0 ? settings.ai.ignored_channels.length : '‚ùå –ù–µ—Ç—É\`'}`,
                    inline: true
                }
            ])  
            .setFooter({
                text: '‚ÑπÔ∏è AI –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã, –∏–º–∏—Ç–∏—Ä—É—è —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º Markov Chain –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.'
            });;

        const buttons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('toggle_ai_system')
                    .setLabel(settings.ai.enabled ? '–í—ã–∫–ª—é—á–∏—Ç—å AI' : '–í–∫–ª—é—á–∏—Ç—å AI')
                    .setStyle(settings.ai.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
                    .setEmoji(settings.ai.enabled ? 'üî¥' : 'üü¢'),
                new ButtonBuilder()
                    .setCustomId('set_ai_chance')
                    .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üé≤')
                    .setDisabled(!settings.ai.enabled),
                new ButtonBuilder()
                    .setCustomId('set_ai_cooldown')
                    .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –∫—É–ª–¥–∞—É–Ω')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚è±Ô∏è')
                    .setDisabled(!settings.ai.enabled),
            );

        const buttons2 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('set_ai_words')
                    .setLabel('–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üìè')
                    .setDisabled(!settings.ai.enabled),
                new ButtonBuilder()
                    .setCustomId('set_ai_channel')
                    .setLabel('–ö–∞–Ω–∞–ª—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üìù')
                    .setDisabled(!settings.ai.enabled),
                new ButtonBuilder()
                    .setCustomId('set_ai_ignoredchannel')
                    .setLabel('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîï')
                    .setDisabled(!settings.ai.enabled),

            );

        const buttons3 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('test_ai_response')
                    .setLabel('–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üß™')
                    .setDisabled(!settings.ai.enabled),
                new ButtonBuilder()
                    .setCustomId('reset_ai')
                    .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîÅ'),
                new ButtonBuilder()
                    .setCustomId('back_to_main')
                    .setLabel('–ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîô')
            );

        await interaction.editReply({ embeds: [embed], components: [buttons, buttons2, buttons3] });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        setupButtonCollector(interaction, bot, settingsService, 'ai');

    } catch (error) {
        logger.error('Error showing AI settings:', error);
        
        const errorOptions = { 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI.',
            components: [] 
        };
        
        if (interaction.replied || interaction.deferred) {
            await interaction.editReply(errorOptions);
        } else {
            await interaction.reply(errorOptions);
        }
    }
}

const timezoneExamples = [
    '`Europe/Moscow`',
    '`Europe/Kiev`',
    '`Europe/London`',
    '`America/New_York`',
    '`America/Los_Angeles`',
    '`Asia/Almaty`',
    '`Asia/Tokyo`',
    '`UTC`',
];

async function showSystemSettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild.id);

        const embed = new EmbedBuilder()
            .setColor('#FF9800')
            .setTitle('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã')
            .setDescription('–û–±—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞')
            .addFields([
                {
                    name: 'üÜö –í–µ—Ä—Å–∏—è',
                    value: `\`${settings.system.version}\``,
                    inline: true
                },
                {
                    name: 'üåê –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞',
                    value: `\`${settings.system.timezone}\`\n[–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–∑–æ–Ω](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)`,
                    inline: true
                },
                {
                    name: 'üó£Ô∏è –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                    value: `\`${settings.system.language}\``,
                    inline: true
                }
            ])
            .setFooter({
                text: '‚ÑπÔ∏è ‚Ä¢ –ü—Ä–µ—Ñ–∏–∫—Å –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥\n‚Ä¢ –¢–∞–π–º–∑–æ–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫\n‚Ä¢ –Ø–∑—ã–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ'
            });

        const buttons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('set_timezone')
                    .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üåê'),
                new ButtonBuilder()
                    .setCustomId('set_language')
                    .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üó£Ô∏è')
            );

        const buttons2 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('back_to_main')
                    .setLabel('–ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîô')
            );

        await interaction.editReply({ embeds: [embed], components: [buttons, buttons2] });

        setupButtonCollector(interaction, bot, settingsService, 'system');
    } catch (error) {
        logger.error('Error showing system settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
            components: [] 
        });
    }
}

const formatHistory = (history: any[]) => {
    if (!history || history.length === 0) return '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞';
    return history
      .slice(-5) // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
      .map(item =>
        `‚Ä¢ [${item.date}] <@${item.userId}>: ${item.action}`
      ).join('\n');
};

async function showAdminSettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild.id);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ —Ä–æ–ª–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const formatRoleList = (roles: string[]) => {
            return roles.length > 0 ? roles.map(id => `<@&${id}>`).join(' ') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ';
        };
        
        const formatUserList = (users: string[]) => {
            return users.length > 0 ? users.map(id => `<@${id}>`).join(' ') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ';
        };

        const embed = new EmbedBuilder()
            .setColor('#FF6B6B')
            .setTitle('üëÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è')
            .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞')
            .addFields([
                {
                    name: 'üëë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∞',
                    value: '‚Ä¢ **–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞** - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n‚Ä¢ **–†–æ–ª–∏ —Å –ø—Ä–∞–≤–æ–º Administrator** - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø',
                    inline: false
                },
                {
                    name: 'üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏',
                    value: `**–†–æ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞:**\n${formatRoleList(settings.admin.roles)}`,
                    inline: false
                },
                {
                    name: 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                    value: `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞:**\n${formatUserList(settings.admin.users)}`,
                    inline: false
                }
            ])
            .setFooter({
                text: '‚ÑπÔ∏è –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º\n‚Ä¢ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI\n‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π'
            });

        const buttons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('manage_admin_roles')
                    .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üõ°Ô∏è'),
                new ButtonBuilder()
                    .setCustomId('manage_admin_users')
                    .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üë§')
            );

        const buttons2 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('reset_admin')
                    .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîÅ'),
                new ButtonBuilder()
                    .setCustomId('back_to_main')
                    .setLabel('–ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîô')
            );

        await interaction.editReply({ embeds: [embed], components: [buttons, buttons2] });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        setupButtonCollector(interaction, bot, settingsService, 'admin');
    } catch (error) {
        logger.error('Error showing channel settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
            components: [] 
        });
    }
}

async function showEconomySettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild.id);
        
        const embed = new EmbedBuilder()
            .setColor('#FFD700')
            .setTitle('üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏')
            .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞')
            .addFields([
                {
                    name: 'üè™ –ú–∞–≥–∞–∑–∏–Ω',
                    value: `‚Ä¢ **–°—Ç–∞—Ç—É—Å:** ${settings.economy.shop_enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω`'}\n` +
                           `‚Ä¢ **–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω:** \`${settings.economy.prices_multiplier}x\`\n` +
                           `‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:** \`${settings.economy.currency_name}\`\n` +
                           `‚Ä¢ **–ó–Ω–∞–∫ –≤–∞–ª—é—Ç—ã:** \`${settings.economy.currency_emoji}\``,
                    inline: true
                },
                {
                    name: 'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã',
                    value: `‚Ä¢ **–°—Ç–∞—Ç—É—Å:** ${settings.economy.daily_bonus_enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω—ã`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã`'}\n` +
                           `‚Ä¢ **–†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞: –æ—Ç ** \`${settings.economy.daily_bonus_max} –¥–æ ${settings.economy.daily_bonus_min} –º–æ–Ω–µ—Ç\`\n` + 
                           `‚Ä¢ **–°–µ—Ä–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:** ${settings.economy.streak_enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω–∞`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞`'}`,
                    inline: true
                },
                {
                    name: 'üèÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã',
                    value: `‚Ä¢ **–°—Ç–∞—Ç—É—Å:** ${settings.economy.weekly_bonus_enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω—ã`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã`'}\n` +
                           `‚Ä¢ **–†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞: –æ—Ç ** \`${settings.economy.weekly_bonus_max} –¥–æ ${settings.economy.weekly_bonus_min} –º–æ–Ω–µ—Ç\``,
                    inline: true
                },
                {
                    name: 'üíé –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–µ—Ç',
                    value: '‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)\n‚Ä¢ –ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (—Ç—Ä–∞—Ç—è—Ç—Å—è)\n‚Ä¢ –°–æ–±—ã—Ç–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã',
                    inline: false
                },
                {
                    name: '‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∞',
                    value: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –º–æ–Ω–µ—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –º–æ–≥—É—Ç —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —Ä–æ–ª–∏, –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.',
                    inline: false
                }
            ]);

        const buttons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('toggle_shop')
                    .setLabel(settings.economy.shop_enabled ? '–í—ã–∫–ª. –º–∞–≥–∞–∑–∏–Ω' : '–í–∫–ª. –º–∞–≥–∞–∑–∏–Ω')
                    .setStyle(settings.economy.shop_enabled ? ButtonStyle.Danger : ButtonStyle.Success)
                    .setEmoji(settings.economy.shop_enabled ? 'üî¥' : 'üü¢'),
                new ButtonBuilder()
                    .setCustomId('set_shop_multiplier')
                    .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚ö°')
                    .setDisabled(!settings.economy.shop_enabled),
                new ButtonBuilder()
                    .setCustomId('set_coins_name')
                    .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üí∏')
                    .setDisabled(!settings.economy.shop_enabled),
                new ButtonBuilder()
                    .setCustomId('set_coins_sign')
                    .setLabel('–ó–Ω–∞–∫ –≤–∞–ª—é—Ç—ã')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üí≤')
                    .setDisabled(!settings.economy.shop_enabled)
            );

        const buttons2 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('toggle_daily_bonus')
                    .setLabel(settings.economy.daily_bonus_enabled ? '–í—ã–∫–ª. –¥–Ω–µ–≤. –±–æ–Ω—É—Å—ã' : '–í–∫–ª. –¥–Ω–µ–≤. –±–æ–Ω—É—Å—ã')
                    .setStyle(settings.economy.daily_bonus_enabled ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('üéÅ'),
                new ButtonBuilder()
                    .setCustomId('set_daily_bonus_amount')
                    .setLabel('–†–∞–∑–º–µ—Ä –¥–Ω–µ–≤. –±–æ–Ω—É—Å–∞')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üí∞')
                    .setDisabled(!settings.economy.daily_bonus_enabled),
                new ButtonBuilder()
                    .setCustomId('toggle_weekly_bonus')
                    .setLabel(settings.economy.weekly_bonus_enabled ? '–í—ã–∫–ª. –Ω–µ–¥–µ–ª—å. –±–æ–Ω—É—Å—ã' : '–í–∫–ª. –Ω–µ–¥–µ–ª—å. –±–æ–Ω—É—Å—ã')
                    .setStyle(settings.economy.weekly_bonus_enabled ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('üèÜ'),
                new ButtonBuilder()
                    .setCustomId('set_weekly_bonus_amount')
                    .setLabel('–†–∞–∑–º–µ—Ä –Ω–µ–¥–µ–ª—å. –±–æ–Ω—É—Å–∞')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('ü™ô')
                    .setDisabled(!settings.economy.weekly_bonus_enabled),
                new ButtonBuilder()
                    .setCustomId('toggle_streak')
                    .setLabel(settings.economy.streak_enabled ? '–í—ã–∫–ª. —Å–µ—Ä–∏—é' : '–í–∫–ª. —Å–µ—Ä–∏—é')
                    .setStyle(settings.economy.streak_enabled ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('üî•')
            );

        const buttons3 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('shop_items')
                    .setLabel('–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üõí')
                    .setDisabled(!settings.economy.shop_enabled),
                new ButtonBuilder()
                    .setCustomId('economy_history')
                    .setLabel('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üìú')
                    .setDisabled(!settings.economy.shop_enabled),
                new ButtonBuilder()
                    .setCustomId('economy_stats')
                    .setLabel('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üìä')
                    .setDisabled(!settings.economy.shop_enabled)
            );

        const buttons4 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('reset_economy')
                    .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîÅ'),
                new ButtonBuilder()
                    .setCustomId('back_to_main')
                    .setLabel('–ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîô')
            );

        await interaction.editReply({ embeds: [embed], components: [buttons, buttons2, buttons3, buttons4] });

        setupButtonCollector(interaction, bot, settingsService, 'economy');

    } catch (error) {
        logger.error('Error showing economy settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫–æ–Ω–æ–º–∏–∫–∏.',
            components: [] 
        });
    }
}

async function showBattlePassSettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    // defer for buttons/selects
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
      if (!interaction.deferred && !interaction.replied) {
        await interaction.deferUpdate();
      }
    }
  
    try {
      const settings = await settingsService.getGuildSettings(interaction.guild.id);
      const bp = settings.battlepass;
  
      const embed = new EmbedBuilder()
        .setColor('#3b82f6')
        .setTitle('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Battle Pass')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–º –ø—Ä–æ–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞')
        .addFields([
          {
            name: '‚ö° –°—Ç–∞—Ç—É—Å',
            value: bp.enabled ? '`üü¢ –í–∫–ª—é—á–µ–Ω`' : '`üî¥ –í—ã–∫–ª—é—á–µ–Ω`',
            inline: true
          },
          {
            name: 'üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π',
            value: `\`${bp.levels}\``,
            inline: true
          },
          {
            name: '‚ú≥Ô∏è XP –¥–ª—è —É—Ä–æ–≤–Ω—è',
            value: `\`${bp.xp_for_level}\``,
            inline: false
          },
          {
            name: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            value: bp.daily_quests.length
              ? bp.daily_quests.map((q: any, i: number) => `${i + 1}. ${q.text} (${q.reward}xp)`).join('\n')
              : '`–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π`',
            inline: false
          },
          {
            name: 'üóìÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            value: bp.weekly_quests.length
              ? bp.weekly_quests.map((q: any, i: number) => `${i + 1}. ${q.text} (${q.reward}xp)`).join('\n')
              : '`–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π`',
            inline: false
          },
          {
            name: 'üéÅ –ù–∞–≥—Ä–∞–¥—ã',
            value: bp.rewards.length
              ? bp.rewards.map((r: any, i: number) => `Lvl ${r.level}: ${r.reward}`).slice(0, 10).join('\n') + (bp.rewards.length > 10 ? '\n...' : '')
              : '`–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥`',
            inline: false
          }
        ])
        .setFooter({ text: '–ò–∑–º–µ–Ω—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!' });
  
      const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId('toggle_bp')
          .setLabel(bp.enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å BP' : '–í–∫–ª—é—á–∏—Ç—å BP')
          .setStyle(bp.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
          .setEmoji(bp.enabled ? 'üî¥' : 'üü¢'),
        new ButtonBuilder()
          .setCustomId('set_bp_levels')
          .setLabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üèÜ')
          .setDisabled(!bp.enabled),
        new ButtonBuilder()
          .setCustomId('set_bp_xp_for_levels')
          .setLabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –¥–ª—è —É—Ä–æ–≤–Ω—è')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚ú≥Ô∏è')
          .setDisabled(!bp.enabled)
      );
  
      const buttons2 = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId('add_daily_quest')
          .setLabel('+ –ï–∂–µ–¥. –∑–∞–¥–∞–Ω–∏–µ')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üìÖ')
          .setDisabled(!bp.enabled),
        new ButtonBuilder()
          .setCustomId('add_weekly_quest')
          .setLabel('+ –ï–∂–µ–Ω. –∑–∞–¥–∞–Ω–∏–µ')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üóìÔ∏è')
          .setDisabled(!bp.enabled),
        new ButtonBuilder()
          .setCustomId('add_bp_reward')
          .setLabel('+ –ù–∞–≥—Ä–∞–¥–∞')
          .setStyle(ButtonStyle.Success)
          .setEmoji('üéÅ')
          .setDisabled(!bp.enabled)
        );

      const buttons3 = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
            .setCustomId('remove_daily_quest')
            .setLabel('- –ï–∂–µ–¥. –∑–∞–¥–∞–Ω–∏–µ')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('‚ùå')
            .setDisabled(!bp.enabled || !bp.daily_quests?.length),
        new ButtonBuilder()
            .setCustomId('remove_weekly_quest')
            .setLabel('- –ï–∂–µ–Ω. –∑–∞–¥–∞–Ω–∏–µ')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('‚ùå')
            .setDisabled(!bp.enabled || !bp.weekly_quests?.length),
            new ButtonBuilder()
            .setCustomId('remove_bp_reward')
            .setLabel('- –ù–∞–≥—Ä–∞–¥–∞')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('‚ùå')
            .setDisabled(!bp.enabled || !bp.rewards?.length)
        );

      const buttons4 = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId('reset_bp')
          .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üîÑ'),
        new ButtonBuilder()
          .setCustomId('back_to_main')
          .setLabel('–ù–∞–∑–∞–¥')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );
  
      await interaction.editReply({
        embeds: [embed],
        components: [buttons, buttons2, buttons3, buttons4]
      });
  
      setupButtonCollector(interaction, bot, settingsService, 'battlepass');
    } catch (error) {
      console.error('Error in showBattlePassSettings:', error);
      await interaction.editReply({
        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Battle Pass.',
        components: []
      });
    }
}

async function showModerationSettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
    }
    
    try {
        const settings = await settingsService.getGuildSettings(interaction.guild.id);
        
        const embed = new EmbedBuilder()
            .setColor('#FF4444')
            .setTitle('üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
            .setDescription('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞')
            .addFields([
                {
                    name: 'ü§ñ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è',
                    value: `‚Ä¢ **–°—Ç–∞—Ç—É—Å:** \`${settings.moderation.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞'}\`\n` +
                           `‚Ä¢ **–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞:** \`${settings.moderation.spam_protection ? 'üü¢ –í–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞'}\`\n` +
                           `‚Ä¢ **–§–∏–ª—å—Ç—Ä –º–∞—Ç–∞:** \`${settings.moderation.profanity_filter ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\``,
                    inline: false
                },
                {
                    name: 'üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                    value: '‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
                    inline: true
                },
                {
                    name: '‚ö†Ô∏è –í–∞–∂–Ω–æ',
                    value: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫.',
                    inline: true
                }
            ]);

        const buttons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('toggle_auto_mod')
                    .setLabel(settings.moderation.enabled ? '–í—ã–∫–ª. –∞–≤—Ç–æ–º–æ–¥' : '–í–∫–ª. –∞–≤—Ç–æ–º–æ–¥')
                    .setStyle(settings.moderation.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
                    .setEmoji(settings.moderation.enabled ? 'üî¥' : 'üü¢'),
                new ButtonBuilder()
                    .setCustomId('toggle_spam_protection')
                    .setLabel(settings.moderation.spam_protection ? '–í—ã–∫–ª. –∞–Ω—Ç–∏—Å–ø–∞–º' : '–í–∫–ª. –∞–Ω—Ç–∏—Å–ø–∞–º')
                    .setStyle(settings.moderation.spam_protection ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('üö´'),
                new ButtonBuilder()
                    .setCustomId('toggle_profanity_filter')
                    .setLabel(settings.moderation.profanity_filter ? '–í—ã–∫–ª. —Ñ–∏–ª—å—Ç—Ä' : '–í–∫–ª. —Ñ–∏–ª—å—Ç—Ä')
                    .setStyle(settings.moderation.profanity_filter ? ButtonStyle.Secondary : ButtonStyle.Primary)
                    .setEmoji('ü§¨')
            );

        const buttons2 = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('moderation_logs')
                    .setLabel('–õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üìã'),
                new ButtonBuilder()
                    .setCustomId('reset_moderation')
                    .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîÅ'),
                new ButtonBuilder()
                    .setCustomId('back_to_main')
                    .setLabel('–ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîô')
            );

        await interaction.editReply({ embeds: [embed], components: [buttons, buttons2] });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        setupButtonCollector(interaction, bot, settingsService, 'moderation');

    } catch (error) {
        logger.error('Error showing moderation settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.',
            components: [] 
        });
    }
}

async function resetSettings(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    await (interaction.deferReply ? interaction.deferReply({ ephemeral: true }) : interaction.deferUpdate());
    try {
        const confirmEmbed = new EmbedBuilder()
            .setColor('#FF0000')
            .setTitle('‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫')
            .setDescription('**–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–µ—Ä–Ω–µ—Ç –∏—Ö –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.')
            .addFields([
                {
                    name: 'üóëÔ∏è –ë—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ:',
                    value: '‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI-—á–∞—Ç–∞\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                    inline: false
                },
                {
                    name: '‚úÖ –ù–ï –±—É–¥–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ:',
                    value: '‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É—Ä–æ–≤–Ω–∏, XP, –º–æ–Ω–µ—Ç—ã)\n‚Ä¢ –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n‚Ä¢ –û–±—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ AI\n‚Ä¢ –õ–æ–≥–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    inline: false
                }
            ])
            .setFooter({ text: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –ü–æ–¥—É–º–∞–π—Ç–µ –¥–≤–∞–∂–¥—ã.' });

        const confirmButtons = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('confirm_reset_settings')
                    .setLabel('–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üóëÔ∏è'),
                new ButtonBuilder()
                    .setCustomId('cancel_reset_settings')
                    .setLabel('–û—Ç–º–µ–Ω–∞')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚ùå')
            );

        const response = await interaction.editReply({ 
            embeds: [confirmEmbed], 
            components: [confirmButtons] 
        });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const collector = response.createMessageComponentCollector({
            componentType: ComponentType.Button,
            time: 30000 // 30 —Å–µ–∫—É–Ω–¥
        });

        collector.on('collect', async (buttonInteraction: ButtonInteraction) => {
            if (buttonInteraction.user.id !== interaction.user.id) {
                await buttonInteraction.reply({ 
                    content: '‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.',
                    ephemeral: true
                });
                return;
            }
            if (buttonInteraction.customId === 'confirm_reset_settings') {
                try {
                    await settingsService.resetGuildSettings(interaction.guild.id);
                    const successEmbed = new EmbedBuilder()
                        .setColor('#00FF00')
                        .setTitle('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã')
                        .setDescription('–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.')
                        .addFields([
                            {
                                name: 'üîÑ –ß—Ç–æ –¥–∞–ª—å—à–µ?',
                                value: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/settings view` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –∑–∞–Ω–æ–≤–æ.',
                                inline: false
                            }
                        ])
                        .setTimestamp();
                    await buttonInteraction.update({ 
                        embeds: [successEmbed], 
                        components: [] 
                    });
                } catch (error) {
                    logger.error('Error resetting settings:', error);
                    const errorEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle('‚ùå –û—à–∏–±–∫–∞')
                        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
                    await buttonInteraction.update({ 
                        embeds: [errorEmbed], 
                        components: [] 
                    });
                }
            } else {
                const cancelEmbed = new EmbedBuilder()
                    .setColor('#FFA500')
                    .setTitle('‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω')
                    .setDescription('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
                await buttonInteraction.update({ 
                    embeds: [cancelEmbed], 
                    components: [] 
                });
            }
            collector.stop();
        });

        collector.on('end', async (collected: Collection<string, ButtonInteraction>) => {
            if (collected.size === 0) {
                try {
                    const timeoutEmbed = new EmbedBuilder()
                        .setColor('#808080')
                        .setTitle('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ')
                        .setDescription('–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.');
                    await interaction.editReply({ 
                        embeds: [timeoutEmbed], 
                        components: [] 
                    });
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                }
            }
        });
    } catch (error) {
        logger.error('Error in reset settings:', error);
        await interaction.editReply({ 
            content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
            components: [] 
        });
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫
async function setupButtonCollector(interaction: any, bot: DiscordBot, settingsService: SettingsService, category: string) {
    const userId = interaction.user.id;
    if (activeCollectors.has(userId)) {
        activeCollectors.get(userId).stop('new_interaction');
        activeCollectors.delete(userId);
    }
    
    let targetMessage;
    if (interaction.isButton() || interaction.isStringSelectMenu()) {
        targetMessage = interaction.message;
    } else if (interaction.isChatInputCommand() && (interaction.replied || interaction.deferred)) {
        targetMessage = await interaction.fetchReply();
    } else {
        return;
    }

    const collector = targetMessage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 300000 // 5 –º–∏–Ω—É—Ç
    });

    activeCollectors.set(userId, collector);

    collector.on('collect', async (buttonInteraction: any) => {
        if (buttonInteraction.user.id !== interaction.user.id) {
            await buttonInteraction.reply({ 
                content: '‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.',
                ephemeral: true
            });
            return;
        }
        try {
            await handleButtonInteraction(buttonInteraction, bot, settingsService, category);
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        } catch (error) {
            logger.error('Error handling button interaction:', error);
            try {
                if (!buttonInteraction.replied && !buttonInteraction.deferred) {
                    await buttonInteraction.reply({
                        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.',
                        ephemeral: true
                    });
                } else if (buttonInteraction.deferred) {
                    // –ï—Å–ª–∏ interaction –±—ã–ª –æ—Ç–ª–æ–∂–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ—Å–ª–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º followUp
                    await buttonInteraction.followUp({
                        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.',
                        ephemeral: true
                    });
                }
            } catch (followUpError) {
                logger.error('Error sending error response:', followUpError);
            }
        }
    });

    collector.on('end', (collected: Collection<string, ButtonInteraction>, reason: string) => {
        if (activeCollectors.has(userId)) {
            activeCollectors.delete(userId);
        }
        if (reason === 'time') {
            try {
                interaction.editReply({ components: [] }).catch(() => {});
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function handleButtonInteraction(interaction: any, bot: DiscordBot, settingsService: SettingsService, category: string) {
    const customId = interaction.customId;
    const guildId = interaction.guild.id;

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if (customId === 'back_to_main') {
        await showAllSettings(interaction, bot, settingsService);
        return;
    }

    const MODAL_BUTTONS = [
        'set_min_text_xp',
        'set_xp_text_multiplier',
        'set_xp_voice_multiplier',
        'set_coins_multiplier',
        'set_levelup_channel',
        'set_ai_chance',
        'set_ai_cooldown',
        'set_ai_words',
        'set_ai_channel',
        'set_ai_ignoredchannel',
        'set_daily_bonus_amount',
        'set_weekly_bonus_amount',
        'manage_admin_roles',
        'manage_admin_users',
        'manage_ignored_roles',
        'manage_admin_ignored_roles',
        'manage_ai_channels',
        'manage_text_xp_channels',
        'manage_voice_xp_channels',
        'manage_ignored_channels',
        'manage_ignored_users',
        'set_shop_multiplier',
        'set_coins_name',
        'set_coins_sign',
        'set_bp_levels',
        'set_bp_xp_for_levels',
        'add_daily_quest',
        'remove_daily_quest',
        'add_weekly_quest',
        'remove_weekly_quest',
        'add_bp_reward',
        'remove_bp_reward',
        'set_timezone',
        'set_language',
        'reset_levels',
        'reset_ai',
        'reset_admin',
        'reset_economy',
        'reset_bp', 
        'reset_moderation'
    ];

    if (!MODAL_BUTTONS.includes(customId) && !interaction.deferred && !interaction.replied) {
        await interaction.deferUpdate();
    }

    if (category === 'levels') {
        switch (customId) {
            case 'toggle_levels_system':
                const currentState = (await settingsService.getGuildSettings(guildId)).levels.enabled;
                await settingsService.updateSetting(guildId, 'levels.enabled', !currentState);
                await showLevelSettings(interaction, bot, settingsService);
                break;

            case 'toggle_text_xp':
                const textXpState = (await settingsService.getGuildSettings(guildId)).levels.text_xp;
                await settingsService.updateSetting(guildId, 'levels.text_xp', !textXpState);
                await showLevelSettings(interaction, bot, settingsService);
                break;

            case 'toggle_voice_xp':
                const voiceXpState = (await settingsService.getGuildSettings(guildId)).levels.voice_xp;
                await settingsService.updateSetting(guildId, 'levels.voice_xp', !voiceXpState);
                await showLevelSettings(interaction, bot, settingsService);
                break;

            case 'toggle_levelup_notifications':
                const notifState = (await settingsService.getGuildSettings(guildId)).levels.levelup_messages;
                await settingsService.updateSetting(guildId, 'levels.levelup_messages', !notifState);
                await showLevelSettings(interaction, bot, settingsService);
                break;

            case 'set_min_text_xp':
                await showTextMinXPModal(interaction);
                break;

            case 'set_xp_text_multiplier':
                await showTextXPMultiplierModal(interaction);
                break;
            
            case 'set_xp_voice_multiplier':
                await showVoiceXPMultiplierModal(interaction);
                break;

            case 'set_coins_multiplier':
                await showCoinsMultiplierModal(interaction);
                break;

            case 'set_levelup_channel':
                await showLevelUpChannelModal(interaction);
                break;
            
            case 'manage_text_xp_channels':
                await showTextXPChannelsModal(interaction);
                break;

            case 'manage_voice_xp_channels':
                await showVoiceXPChannelsModal(interaction);
                break;

            case 'manage_ignored_channels':
                await showIgnoredChannelsModal(interaction);
                break;

            case 'manage_ignored_roles':
                await showIgnoredRolesLevelsModal(interaction);
                break;

            case 'manage_ignored_users':
                await showIgnoredUsersLevelsModal(interaction);
                break;

            case 'reset_levels':
                await resetLevelsModal(interaction, bot);
                break;
        }
    }

    if (category === 'ai') {
        switch (customId) {
            case 'toggle_ai_system':
                const aiState = (await settingsService.getGuildSettings(guildId)).ai.enabled;
                await settingsService.updateSetting(guildId, 'ai.enabled', !aiState);
                await showAISettings(interaction, bot, settingsService);
                break;
            case 'set_ai_chance':
                await showAIChanceModal(interaction);
                break;
            case 'set_ai_cooldown':
                await showAICooldownModal(interaction); 
                break;
            case 'set_ai_words':
                await showAIWordsModal(interaction); 
                break;
            case 'set_ai_channel':
                await showAIChannelsModal(interaction); 
                break;
            case 'set_ai_ignoredchannel':
                await showAIChannelsIgnoredModal(interaction); 
                break;
            case 'test_ai_response':
                await testAIResponse(interaction, bot);
                break;
            case 'reset_ai':
                await resetAIModal(interaction, bot);
                break;
        }
    }

    if (category === 'economy') {
        switch (customId) {
            case 'toggle_shop':
                const shopState = (await settingsService.getGuildSettings(guildId)).economy.shop_enabled;
                await settingsService.updateSetting(guildId, 'economy.shop_enabled', !shopState);
                await showEconomySettings(interaction, bot, settingsService);
                break;
            case 'toggle_daily_bonus':
                const dailyState = (await settingsService.getGuildSettings(guildId)).economy.daily_bonus_enabled;
                await settingsService.updateSetting(guildId, 'economy.daily_bonus_enabled', !dailyState);
                await showEconomySettings(interaction, bot, settingsService);
                break;
            case 'toggle_weekly_bonus':
                const weeklyState = (await settingsService.getGuildSettings(guildId)).economy.weekly_bonus_enabled;
                await settingsService.updateSetting(guildId, 'economy.weekly_bonus_enabled', !weeklyState);
                await showEconomySettings(interaction, bot, settingsService);
                break;
            case 'toggle_streak':
                const streakState = (await settingsService.getGuildSettings(guildId)).economy.streak_enabled;
                await settingsService.updateSetting(guildId, 'economy.streak_enabled', !streakState);
                await showEconomySettings(interaction, bot, settingsService);
                break;
            case 'set_daily_bonus_amount':
                await showDailyBonusModal(interaction); 
                break;
            case 'set_weekly_bonus_amount':
                await showWeeklyBonusModal(interaction); 
                break;
            case 'set_shop_multiplier':
                await showShopMultiplierModal(interaction); 
                break;
            case 'set_coins_name':
                await showCoinsCurrencyModal(interaction); 
                break;
            case 'set_coins_sign':
                await showSignCurrencyModal(interaction); 
                break;
            case 'shop_items': 
                await showItemsStats(interaction, bot, settingsService);
                break;
            case 'economy_history': 
                await showEconomyHistory(interaction, bot, settingsService);
                break;
            case 'economy_stats': 
                await showEconomyStats(interaction, bot, settingsService);
                break;
            case 'reset_economy':
                await resetEconomyModal(interaction, bot);
                break;
        }
    }

    if (category === 'battlepass') {
        switch (customId) {
            case 'toggle_bp': 
                const bpState = (await settingsService.getGuildSettings(guildId)).battlepass.enabled;
                await settingsService.updateSetting(guildId, 'battlepass.enabled', !bpState);
                await showBattlePassSettings(interaction, bot, settingsService);
                break;
            case 'set_bp_levels': 
                await showBPLevelsModal(interaction);
                break;
            case 'set_bp_xp_for_levels': 
                await showBPXpForLevelsModal(interaction);
                break;
            case 'add_daily_quest': 
                await showBPDailyQuestModal(interaction);
                break;
            case 'remove_daily_quest':
                await showRemoveBPDailyQuestModal(interaction); 
                break;
            case 'add_weekly_quest': 
                await showBPWeeklyQuestModal(interaction);
                break;
            case 'remove_weekly_quest':
                await showRemoveBPWeeklyQuestModal(interaction); 
                break;
            case 'add_bp_reward': 
                await showBPRewardModal(interaction);
                break;
            case 'remove_bp_reward':
                await showRemoveBPRewardModal(interaction); 
                break;
            case 'reset_bp': 
                await settingsService.updateSetting(guildId, 'battlepass', settingsService.defaultSettings.battlepass);
                await showBattlePassSettings(interaction, bot, settingsService);
                break;
        }
    }

    if (category === 'admin') {
        switch (customId) {
            case 'manage_admin_roles':
                await showAdminRolesModal(interaction);
                break;
            case 'manage_admin_users':
                await showAdminUsersModal(interaction);
                break;
            case 'reset_admin':
                await resetAdminModal(interaction, bot);
                break;
        }
    }

    if (category === 'system') {
        switch (customId) {
            case 'set_timezone':
                await showSetTimezoneModal(interaction);
                break;
            case 'set_language':
                await showSetLanguageModal(interaction);
                break;
        }
    }

    if (category === 'moderation') {
        const guildId = interaction.guild.id;
        const settings = await settingsService.getGuildSettings(guildId);
      
        switch (customId) {
          case 'toggle_auto_mod': {
            await settingsService.updateSetting(guildId, 'moderation.enabled', !settings.moderation.enabled);
            await showModerationSettings(interaction, bot, settingsService);
            break;
          }
          case 'toggle_spam_protection': {
            await settingsService.updateSetting(guildId, 'moderation.spam_protection', !settings.moderation.spam_protection);
            await showModerationSettings(interaction, bot, settingsService);
            break;
          }
          case 'toggle_profanity_filter': {
            await settingsService.updateSetting(guildId, 'moderation.profanity_filter', !settings.moderation.profanity_filter);
            await showModerationSettings(interaction, bot, settingsService);
            break;
          }
          case 'moderation_logs': {
            await showModerationLogs(interaction, bot, settingsService);
            break;
          }
          case 'reset_moderation':
            await resetModerationModal(interaction, bot);
            break;
        }
    }
}

async function handleModalSubmit(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    const customId = interaction.customId;

    if (customId === 'xp_multiplier_modal') {
        const multiplierInput = interaction.fields.getTextInputValue('xp_multiplier');
        const multiplier = parseFloat(multiplierInput);

        if (isNaN(multiplier) || multiplier <= 0) {
            await interaction.reply({
                content: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å XP. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.',
                ephemeral: true
            });
            return;
        }

        try {
            await settingsService.updateSetting(interaction.guild.id, 'xp_multiplier', multiplier);
            await interaction.reply({
                content: `‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å XP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **${multiplier}x**`,
                ephemeral: true
            });
        } catch (error) {
            logger.error('Error updating xp_multiplier:', error);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
                ephemeral: true
            });
        }
    }
}

// ====================== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ======================

// --- –£—Ä–æ–≤–Ω–∏ ---
async function resetLevelsModal(interaction: ButtonInteraction, bot: DiscordBot) {
    const guildId = interaction.guild!.id;
  
    const modal = new ModalBuilder()
      .setCustomId('confirm_reset_levels')
      .setTitle('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π?');
  
    const confirmInput = new TextInputBuilder()
      .setCustomId('confirm_text_levels')
      .setLabel('–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –î–ê')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(confirmInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function showTextMinXPModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('xp_minwords_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º —Å–ª–æ–≤ –¥–ª—è XP');

    const multiplierInput = new TextInputBuilder()
        .setCustomId('xp_min_word')
        .setLabel('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(3)
        .setMaxLength(100)
        .setPlaceholder('3')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(multiplierInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showTextXPMultiplierModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('xp_text_multiplier_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö XP');

    const multiplierInput = new TextInputBuilder()
        .setCustomId('xp_text_multiplier')
        .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(10)
        .setPlaceholder('1.0')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(multiplierInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showVoiceXPMultiplierModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('xp_voice_multiplier_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤—ã—Ö XP');

    const multiplierInput = new TextInputBuilder()
        .setCustomId('xp_voice_multiplier')
        .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(10)
        .setPlaceholder('1.0')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(multiplierInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showCoinsMultiplierModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('coins_multiplier_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç');

    const multiplierInput = new TextInputBuilder()
        .setCustomId('coins_multiplier')
        .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(10)
        .setPlaceholder('1.0')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(multiplierInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showLevelUpChannelModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('levelup_channel_modal')
        .setTitle('üì¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    const channelInput = new TextInputBuilder()
        .setCustomId('channel_id')
        .setLabel('ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789012345678)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(17)
        .setMaxLength(20)
        .setPlaceholder('123456789012345678')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showTextXPChannelsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('text_xp_channels_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ XP');

    const channelsInput = new TextInputBuilder()
        .setCustomId('text_xp_channels')
        .setLabel('ID –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showVoiceXPChannelsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('voice_xp_channels_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ XP');

    const channelsInput = new TextInputBuilder()
        .setCustomId('voice_xp_channels')
        .setLabel('ID –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showIgnoredChannelsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('ignored_channels_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏');

    const channelsInput = new TextInputBuilder()
        .setCustomId('ignored_channels')
        .setLabel('ID –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showIgnoredRolesLevelsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('level_ignored_roles_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ —Ä–æ–ª—è–º–∏');

    const channelsInput = new TextInputBuilder()
        .setCustomId('level_ignored_roles')
        .setLabel('ID —Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showIgnoredUsersLevelsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('level_ignored_users_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');

    const channelsInput = new TextInputBuilder()
        .setCustomId('level_ignored_users')
        .setLabel('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

// --- AI --- 
async function resetAIModal(interaction: ButtonInteraction, bot: DiscordBot) {
    const guildId = interaction.guild!.id;
  
    const modal = new ModalBuilder()
      .setCustomId('confirm_reset_ai')
      .setTitle('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò?');
  
    const confirmInput = new TextInputBuilder()
      .setCustomId('confirm_text_ai')
      .setLabel('–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –î–ê')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(confirmInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function showAIChanceModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('ai_chance_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ AI');

    const chanceInput = new TextInputBuilder()
        .setCustomId('ai_chance')
        .setLabel('–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(5)
        .setPlaceholder('5')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(chanceInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showAICooldownModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('ai_cooldown_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω AI');

    const cooldownInput = new TextInputBuilder()
        .setCustomId('ai_cooldown')
        .setLabel('–ö—É–ª–¥–∞—É–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(4)
        .setPlaceholder('30')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(cooldownInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showAIWordsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('ai_words_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤ AI');

    const minWordsInput = new TextInputBuilder()
        .setCustomId('ai_min_words')
        .setLabel('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(3)
        .setPlaceholder('3')
        .setRequired(true);

    const maxWordsInput = new TextInputBuilder()
        .setCustomId('ai_max_words')
        .setLabel('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(3)
        .setPlaceholder('15')
        .setRequired(true);

    const row1 = new ActionRowBuilder<TextInputBuilder>().addComponents(minWordsInput);
    const row2 = new ActionRowBuilder<TextInputBuilder>().addComponents(maxWordsInput);

    modal.addComponents(row1, row2);
    await interaction.showModal(modal);
}

async function showAIChannelsModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('ai_channels_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∫–∞–Ω–∞–ª–∞–º–∏');

    const channelsInput = new TextInputBuilder()
        .setCustomId('ai_channels')
        .setLabel('ID –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function testAIResponse(interaction: any, bot: DiscordBot) {
    try {
        const response = await bot.markov.generateResponse(interaction.guild.id, interaction.channel.id);
        if (response) {
            const embed = new EmbedBuilder()
                .setColor('#9932CC')
                .setTitle('üß™ –¢–µ—Å—Ç–æ–≤—ã–π AI –æ—Ç–≤–µ—Ç')
                .setDescription(`"${response}"`)
                .setFooter({ text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' });
            await interaction.channel.send({ embeds: [embed] }); // <<<<< –û–¢–ü–†–ê–í–ö–ê –ö–ê–ö –û–¢–î–ï–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        } else {
            const embed = new EmbedBuilder()
                .setColor('#eb4034')
                .setTitle('–û—à–∏–±–∫–∞')
                .setDescription('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.');
            await interaction.channel.send({ embeds: [embed] });
        }
    } catch (error) {
        logger.error('Error testing AI response:', error);
        const embed = new EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
        await interaction.channel.send({ embeds: [embed] });
    }
}

async function showAIChannelsIgnoredModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('ai_channels_ignored_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ AI –∫–∞–Ω–∞–ª–∞–º–∏');

    const channelsInput = new TextInputBuilder()
        .setCustomId('ai_channels_ignored')
        .setLabel('ID –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "clear"')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

// --- –≠–∫–æ–Ω–æ–º–∏–∫–∞ ---
async function resetEconomyModal(interaction: ButtonInteraction, bot: DiscordBot) {
    const guildId = interaction.guild!.id;
  
    const modal = new ModalBuilder()
      .setCustomId('confirm_reset_economy')
      .setTitle('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏?');
  
    const confirmInput = new TextInputBuilder()
      .setCustomId('confirm_text_economy')
      .setLabel('–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –î–ê')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(confirmInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function showDailyBonusModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('daily_bonus_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞');

    const minInput = new TextInputBuilder()
        .setCustomId('daily_bonus_amount_min')
        .setLabel('–ú–∏–Ω–∏–º—É–º (–º–æ–Ω–µ—Ç ‚â• 1)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(7)
        .setPlaceholder('100')
        .setRequired(true);

    const maxInput = new TextInputBuilder()
        .setCustomId('daily_bonus_amount_max')
        .setLabel('–ú–∞–∫—Å–∏–º—É–º (–º–æ–Ω–µ—Ç ‚â§ 1000000)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(7)
        .setPlaceholder('1000')
        .setRequired(true);

    const row1 = new ActionRowBuilder<TextInputBuilder>().addComponents(minInput);
    const row2 = new ActionRowBuilder<TextInputBuilder>().addComponents(maxInput);

    modal.addComponents(row1, row2);
    await interaction.showModal(modal);
}

async function showWeeklyBonusModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('weekly_bonus_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞');

    const minInput = new TextInputBuilder()
        .setCustomId('weekly_bonus_amount_min')
        .setLabel('–ú–∏–Ω–∏–º—É–º (–º–æ–Ω–µ—Ç ‚â• 1)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(7)
        .setPlaceholder('100')
        .setRequired(true);

    const maxInput = new TextInputBuilder()
        .setCustomId('weekly_bonus_amount_max')
        .setLabel('–ú–∞–∫—Å–∏–º—É–º (–º–æ–Ω–µ—Ç ‚â§ 1000000)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(7)
        .setPlaceholder('1000')
        .setRequired(true);

    const row1 = new ActionRowBuilder<TextInputBuilder>().addComponents(minInput);
    const row2 = new ActionRowBuilder<TextInputBuilder>().addComponents(maxInput);

    modal.addComponents(row1, row2);
    await interaction.showModal(modal);
}

async function showShopMultiplierModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('shop_multiplier_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω');

    const multiplierInput = new TextInputBuilder()
        .setCustomId('shop_multiplier')
        .setLabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(1)
        .setMaxLength(10)
        .setPlaceholder('1.0')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(multiplierInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showCoinsCurrencyModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('coins_currency_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã');

    const channelsInput = new TextInputBuilder()
        .setCustomId('coins_currency')
        .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(20)
        .setPlaceholder('Coins')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showSignCurrencyModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('coins_sign_modal')
        .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞–∫ –≤–∞–ª—é—Ç—ã');

    const channelsInput = new TextInputBuilder()
        .setCustomId('coins_sign')
        .setLabel('–ó–Ω–∞–∫ –≤–∞–ª—é—Ç—ã')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(5)
        .setPlaceholder('üí∞')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(channelsInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showItemsStats(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    try {
        const guildId = interaction.guild.id;
        const settings = await settingsService.getGuildSettings(guildId);

        let shopItems: Array<{ 
            id: number; 
            name: string; 
            price: number; 
            role_id: string | null;
            purchase_count: number;
        }> = [];
        let totalItems = 0;

        if (bot.database.ShopItems && bot.database.UserPurchases) {
            const itemsRawAny = await bot.database.rawQuery<{
                id: number;
                name: string;
                price: number;
                role_id: string | null;
                purchase_count: number;
            }>(`
                SELECT 
                    si.id,
                    si.name,
                    si.price,
                    si.role_id,
                    COUNT(up.id) as purchase_count
                FROM shop_items si
                LEFT JOIN user_purchases up ON si.id = up.item_id
                WHERE si.guild_id = ? AND si.is_active = 1
                GROUP BY si.id, si.name, si.price, si.role_id
                ORDER BY purchase_count DESC
                LIMIT 10
            `, [guildId]);

            let shopRows: any[] = [];
            if (Array.isArray(itemsRawAny)) {
                shopRows = itemsRawAny;
            } else if (Array.isArray((itemsRawAny as any).rows)) {
                shopRows = (itemsRawAny as any).rows;
            } else if (Array.isArray((itemsRawAny as any)[0])) {
                shopRows = (itemsRawAny as any)[0];
            } else {
                shopRows = [];
            }
            shopItems = shopRows.map(item => ({
                ...item,
                role_id: item.role_id ?? item.roleid ?? null,
                purchase_count: Number(item.purchase_count) || 0
            }));

            totalItems = await bot.database.ShopItems.count({
                where: { guild_id: guildId, is_active: true }
            });
        }

        const itemsList = shopItems.length
            ? shopItems.map((item, i) => {
                const roleInfo = item.role_id ? `<@&${item.role_id}>` : '–ë–µ–∑ —Ä–æ–ª–∏';
                return `${i + 1}. **${item.name}** ‚Äî ${item.price} ${settings.economy.currency_emoji} | –ü—Ä–æ–¥–∞–Ω–æ: ${item.purchase_count} | –†–æ–ª—å: ${roleInfo}`;
            }).join('\n')
            : '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ';

        const embed = new EmbedBuilder()
            .setColor('#9B59B6')
            .setTitle('üõí –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞')
            .setDescription('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –ø—Ä–æ–¥–∞–∂–∞–º')
            .addFields(
                { name: '–°—Ç–∞—Ç—É—Å –º–∞–≥–∞–∑–∏–Ω–∞', value: settings.economy.shop_enabled ? 'üü¢ –í–∫–ª—é—á—ë–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω', inline: true },
                { name: '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤', value: `${totalItems}`, inline: true },
                { name: '–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω', value: `${settings.economy.prices_multiplier}x`, inline: true },
                { name: '–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', value: itemsList, inline: false },
                { name: '‚ÑπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏', value: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã `/shop add` –∏ `/shop remove` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏', inline: false }
            )
            .setTimestamp();

        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
        await interaction.followUp({ embeds: [embed], ephemeral: true });
    } catch (err) {
        logger.error('Error in showItemsStats:', err);
        try {
            if (!interaction.replied) {
                await interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.', ephemeral: true });
            }
        } catch {}
    }
}

async function showEconomyHistory(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    try {
        const guildId = interaction.guild.id;
        const settings = await settingsService.getGuildSettings(guildId);

        let purchases: Array<{ 
            id: number;
            user_id: string;
            item_name: string;
            item_price: number;
            createdAt: string;
        }> = [];
        let totalPurchases = 0;

        if (bot.database.UserPurchases && bot.database.ShopItems) {
            const purchasesResult = await bot.database.rawQuery<{
                id: number;
                user_id: string;
                item_name: string;
                item_price: number;
                createdAt: string;
            }>(`
                SELECT 
                    up.id,
                    up.user_id,
                    si.name as item_name,
                    si.price as item_price,
                    up.createdAt
                FROM user_purchases up
                INNER JOIN shop_items si ON up.item_id = si.id
                WHERE up.guild_id = ?
                ORDER BY up.createdAt DESC
                LIMIT 15
            `, [guildId]);
            // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
            let rows: any[] = [];
            if (Array.isArray(purchasesResult)) {
                rows = purchasesResult;
            } else if (Array.isArray((purchasesResult as any).rows)) {
                rows = (purchasesResult as any).rows;
            } else if (Array.isArray((purchasesResult as any)[0])) {
                rows = (purchasesResult as any)[0];
            } else {
                rows = [];
            }
            purchases = rows.map((p: any) => ({
                id: p.id,
                user_id: p.user_id,
                item_name: p.item_name,
                item_price: p.item_price,
                createdAt: p.createdAt
            }));

            totalPurchases = await bot.database.UserPurchases.count({
                where: { guild_id: guildId }
            });
        }

        const historyLines = purchases.length
            ? purchases.map((purchase, i) => {
                const date = new Date(purchase.createdAt).toLocaleString('ru-RU', { 
                    day: '2-digit', 
                    month: '2-digit', 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                return `üõí <@${purchase.user_id}> –∫—É–ø–∏–ª **${purchase.item_name}** –∑–∞ ${purchase.item_price} ${settings.economy.currency_emoji} (${date})`;
            }).join('\n')
            : '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞';

        const embed = new EmbedBuilder()
            .setColor('#3498DB')
            .setTitle('üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫')
            .setDescription('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞')
            .addFields(
                { name: '–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫', value: `${totalPurchases}`, inline: true },
                { name: '–ü–æ–∫–∞–∑–∞–Ω–æ', value: `${Math.min(purchases.length, 15)}`, inline: true },
                { name: '\u200b', value: '\u200b', inline: true },
                { name: 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –ø–æ–∫—É–ø–æ–∫', value: historyLines, inline: false }
            )
            .setFooter({ text: '–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' })
            .setTimestamp();

        if (!interaction.deferred && !interaction.replied) {
            await interaction.deferUpdate();
        }
        await interaction.followUp({ embeds: [embed], ephemeral: true });
    } catch (err) {
        logger.error('Error in showEconomyHistory:', err);
        try {
            if (!interaction.replied) {
                await interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.', ephemeral: true });
            }
        } catch {}
    }
}

async function showEconomyStats(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    try {
      const guildId = interaction.guild.id;
      const settings = await settingsService.getGuildSettings(guildId);
  
      // –ë–∞–∑–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã
      let topUsers: Array<{ id: string; username: string; coins: number; level: number }> = [];
      let totalCoins = 0;
  
      if (bot.database.User) {
        // –¢–æ–ø-10 –ø–æ –º–æ–Ω–µ—Ç–∞–º
        topUsers = await bot.database.User.findAll({
          attributes: ['id', 'username', 'coins', 'level'],
          order: [['coins', 'DESC']],
          limit: 10,
          raw: true,
        });
  
        // –°—É–º–º–∞ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥—Ä–µ–≥–∞—Ç –º–æ–¥–µ–ª–∏
        const totalCoinsRaw = await bot.database.User.sum('coins');
        totalCoins = Number(totalCoinsRaw ?? 0);
      }
  
      const topLines = topUsers.length
        ? topUsers.map((u, i) => `${i + 1}. ${u.username ?? 'Unknown'} ‚Äî ${u.coins} ü™ô`).join('\n')
        : '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  
      const embed = new EmbedBuilder()
        .setColor('#FFD700')
        .setTitle('–≠–∫–æ–Ω–æ–º–∏–∫–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        .setDescription('–°–≤–æ–¥–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏ –ª–∏–¥–µ—Ä–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏')
        .addFields(
          { name: '–ú–∞–≥–∞–∑–∏–Ω', value: settings.economy.shop_enabled ? '–í–∫–ª—é—á—ë–Ω' : '–í—ã–∫–ª—é—á–µ–Ω', inline: true },
          { name: '–ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç', value: `${settings.economy.prices_multiplier ?? 1}x`, inline: true },
          { name: '–î–µ–π–ª–∏ –±–æ–Ω—É—Å', value: settings.economy.daily_bonus_enabled ? `${settings.economy.daily_bonus_max ?? 0} –æ—Ç ${settings.economy.daily_bonus_min ?? 0} ü™ô` : '–í—ã–∫–ª—é—á–µ–Ω', inline: true },
          { name: '–°—É–º–º–∞ –º–æ–Ω–µ—Ç (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)', value: `${totalCoins} ü™ô`, inline: false },
          { name: '–¢–æ–ø-10 –ø–æ –º–æ–Ω–µ—Ç–∞–º', value: topLines, inline: false },
        )
        .setTimestamp();
  
      // –î–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–≤–µ—Ç–∞
      if (!interaction.deferred && !interaction.replied) {
        await interaction.deferUpdate();
      }
      await interaction.followUp({ embeds: [embed], ephemeral: true });
    } catch (err) {
      logger.error('Error in showEconomyStats:', err);
      try {
        if (!interaction.replied) {
          await interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏.', ephemeral: true });
        }
      } catch {}
    }
}

// --- Battlepass ---
export async function showBPLevelsModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('set_bp_levels_modal')
      .setTitle('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π Battle Pass');
  
    const input = new TextInputBuilder()
      .setCustomId('set_bp_levels_value')
      .setLabel('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π')
      .setPlaceholder('–ù–∞–ø—Ä: 50')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(input);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

export async function showBPXpForLevelsModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('set_bp_xp_for_levels_modal')
      .setTitle('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å XP –¥–ª—è —É—Ä–æ–≤–Ω—è BattlePass');
  
    const input = new TextInputBuilder()
      .setCustomId('bp_xp_for_levels_value')
      .setLabel('–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –¥–ª—è –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è')
      .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: 100')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    modal.addComponents(
      new ActionRowBuilder<TextInputBuilder>().addComponents(input)
    );
  
    await interaction.showModal(modal);
}

export async function showBPDailyQuestModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('add_bp_dailyquest_modal')
      .setTitle('–î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
  
    const textInput = new TextInputBuilder()
      .setCustomId('daily_quest_text')
      .setLabel('–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è')
      .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Ç–ø—Ä–∞–≤–∏—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const targetInput = new TextInputBuilder()
      .setCustomId('daily_quest_target')
      .setLabel('–¢—Ä–µ–±—É–µ–º–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 10)')
      .setPlaceholder('10')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const rewardInput = new TextInputBuilder()
      .setCustomId('daily_quest_reward')
      .setLabel('–ù–∞–≥—Ä–∞–¥–∞ (xp)')
      .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: 20')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const typeInput = new TextInputBuilder()
      .setCustomId('daily_quest_type')
      .setLabel('–¢–∏–ø –∑–∞–¥–∞—á–∏')
      .setPlaceholder('messages / voice / streak / gift / invites / custom')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const gameTypeInput = new TextInputBuilder()
      .setCustomId('daily_quest_gametype')
      .setLabel('–¢–∏–ø –∏–≥—Ä—ã (–¥–ª—è game-–∫–≤–µ—Å—Ç–æ–≤)')
      .setPlaceholder('slots / dice / coin / duel (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±—ã—Ö)')
      .setStyle(TextInputStyle.Short)
      .setRequired(false);
  
    modal.addComponents(
        new ActionRowBuilder<TextInputBuilder>().addComponents(textInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(targetInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(rewardInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(typeInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(gameTypeInput)
    );
    await interaction.showModal(modal);
}

export async function showRemoveBPDailyQuestModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('remove_bp_dailyquest_modal')
      .setTitle('–£–¥–∞–ª–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
  
    const indexInput = new TextInputBuilder()
      .setCustomId('daily_quest_index')
      .setLabel('–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1, 2, 3...)')
      .setPlaceholder('1')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    modal.addComponents(new ActionRowBuilder<TextInputBuilder>().addComponents(indexInput));
    await interaction.showModal(modal);
}

export async function showBPWeeklyQuestModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('add_bp_weeklyquest_modal')
      .setTitle('–î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
  
    const textInput = new TextInputBuilder()
      .setCustomId('weekly_quest_text')
      .setLabel('–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è')
      .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–∏—Ç—å streak 7 –¥–Ω–µ–π')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const targetInput = new TextInputBuilder()
      .setCustomId('weekly_quest_target')
      .setLabel('–¢—Ä–µ–±—É–µ–º–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –¥–Ω–µ–π streak ‚Äî 7)')
      .setPlaceholder('7')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const rewardInput = new TextInputBuilder()
      .setCustomId('weekly_quest_reward')
      .setLabel('–ù–∞–≥—Ä–∞–¥–∞ (xp)')
      .setPlaceholder('100')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const typeInput = new TextInputBuilder()
      .setCustomId('weekly_quest_type')
      .setLabel('–¢–∏–ø –∑–∞–¥–∞—á–∏')
      .setPlaceholder('messages / voice / streak / gift / invites / custom')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
      
    const gameTypeInput = new TextInputBuilder()
      .setCustomId('weekly_quest_gametype')
      .setLabel('–¢–∏–ø –∏–≥—Ä—ã (–¥–ª—è game-–∫–≤–µ—Å—Ç–æ–≤)')
      .setPlaceholder('slots / dice / coin / duel (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±—ã—Ö)')
      .setStyle(TextInputStyle.Short)
      .setRequired(false);
  
    modal.addComponents(
        new ActionRowBuilder<TextInputBuilder>().addComponents(textInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(targetInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(rewardInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(typeInput),
        new ActionRowBuilder<TextInputBuilder>().addComponents(gameTypeInput)
    );
    await interaction.showModal(modal);
}

export async function showRemoveBPWeeklyQuestModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('remove_bp_weeklyquest_modal')
      .setTitle('–£–¥–∞–ª–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
  
    const indexInput = new TextInputBuilder()
      .setCustomId('weekly_quest_index')
      .setLabel('–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      .setPlaceholder('1')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    modal.addComponents(new ActionRowBuilder<TextInputBuilder>().addComponents(indexInput));
    await interaction.showModal(modal);
}

export async function showBPRewardModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('add_bp_reward_modal')
      .setTitle('–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å');
  
    const levelInput = new TextInputBuilder()
      .setCustomId('bp_reward_level')
      .setLabel('–ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è')
      .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: 10')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const rewardInput = new TextInputBuilder()
      .setCustomId('bp_reward_text')
      .setLabel('–ù–∞–≥—Ä–∞–¥–∞ (—Ç–µ–∫—Å—Ç, —Ä–æ–ª—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç)')
      .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: üëë –û—Å–æ–±–∞—è —Ä–æ–ª—å!')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const typeInput = new TextInputBuilder()
      .setCustomId('bp_reward_type')
      .setLabel('–¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã (role, coins, custom)')
      .setPlaceholder('role')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    modal.addComponents(
      new ActionRowBuilder<TextInputBuilder>().addComponents(levelInput),
      new ActionRowBuilder<TextInputBuilder>().addComponents(rewardInput),
      new ActionRowBuilder<TextInputBuilder>().addComponents(typeInput)
    );
    await interaction.showModal(modal);
}

export async function showRemoveBPRewardModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('remove_bp_reward_modal')
      .setTitle('–£–¥–∞–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å');
  
    const levelInput = new TextInputBuilder()
      .setCustomId('bp_reward_level')
      .setLabel('–£—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã')
      .setPlaceholder('10')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    modal.addComponents(new ActionRowBuilder<TextInputBuilder>().addComponents(levelInput));
    await interaction.showModal(modal);
}

export async function resetBattlepassModal(interaction: ButtonInteraction) {
    const modal = new ModalBuilder()
      .setCustomId('confirm_reset_battlepass')
      .setTitle('–°–±—Ä–æ—Å–∏—Ç—å Battle Pass?');
  
    const confirmInput = new TextInputBuilder()
      .setCustomId('confirm_text_battlepass')
      .setLabel('–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –î–ê')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(confirmInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

// --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ---
async function resetAdminModal(interaction: ButtonInteraction, bot: DiscordBot) {
    const guildId = interaction.guild!.id;
  
    const modal = new ModalBuilder()
      .setCustomId('confirm_reset_ai')
      .setTitle('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò?');
  
    const confirmInput = new TextInputBuilder()
      .setCustomId('confirm_text_ai')
      .setLabel('–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –î–ê')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(confirmInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function showAdminRolesModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('admin_roles_modal')
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω —Ä–æ–ª—è–º–∏');

    const rolesInput = new TextInputBuilder()
        .setCustomId('admin_roles')
        .setLabel('ID —Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∏–ª–∏ "clear")')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(rolesInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

async function showAdminUsersModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('admin_users_modal')
        .setTitle('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');

    const usersInput = new TextInputBuilder()
        .setCustomId('admin_users')
        .setLabel('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∏–ª–∏ "clear")')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setPlaceholder('123456789012345678 987654321098765432')
        .setRequired(true);

    const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(usersInput);

    modal.addComponents(actionRow);
    await interaction.showModal(modal);
}

// --- –°–∏—Å—Ç–µ–º–∞ ---
async function showSetTimezoneModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('set_timezone_modal')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É –±–æ—Ç–∞');

    const zoneInput = new TextInputBuilder()
        .setCustomId('timezone_value')
        .setLabel('–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(3)
        .setMaxLength(50)
        .setPlaceholder('Europe/Moscow, UTC, Asia/Almaty, America/New_York')
        .setRequired(true);

    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(zoneInput);

    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function showSetLanguageModal(interaction: any) {
    const modal = new ModalBuilder()
        .setCustomId('set_language_modal')
        .setTitle('–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');

    const examples = 'ru, ua, uk';
    const langInput = new TextInputBuilder()
        .setCustomId('language_value')
        .setLabel('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ru, ua, uk)')
        .setStyle(TextInputStyle.Short)
        .setMinLength(2)
        .setMaxLength(5)
        .setPlaceholder(examples)
        .setRequired(true);

    modal.addComponents(
        new ActionRowBuilder<TextInputBuilder>().addComponents(langInput)
    );
    await interaction.showModal(modal);
}


// --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è ---
async function resetModerationModal(interaction: ButtonInteraction, bot: DiscordBot) {
    const guildId = interaction.guild!.id;
  
    const modal = new ModalBuilder()
      .setCustomId('confirm_reset_moderation')
      .setTitle('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏?');
  
    const confirmInput = new TextInputBuilder()
      .setCustomId('confirm_text_moderation')
      .setLabel('–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –î–ê')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);
  
    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(confirmInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function showModerationLogs(interaction: any, bot: DiscordBot, settingsService: SettingsService) {
    try {
      const guildId = interaction.guild.id;
      const settings = await settingsService.getGuildSettings(guildId);
  
      if (!settings.moderation.enabled) {
        if (!interaction.deferred && !interaction.replied) await interaction.deferUpdate();
        return interaction.followUp({ content: '–ê–≤—Ç–æ–º–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –ª–æ–≥–æ–≤ –Ω–µ—Ç.', ephemeral: true });
      }
  
      let channel = interaction.channel as TextChannel | null;
      if (!channel || !channel.isTextBased()) {
        if (!interaction.deferred && !interaction.replied) await interaction.deferUpdate();
        return interaction.followUp({ content: '–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –ª–æ–≥–∏ –∑–¥–µ—Å—å –Ω–µ —á–∏—Ç–∞—é—Ç—Å—è.', ephemeral: true });
      }
  
      const msgs = await channel.messages.fetch({ limit: 100 });
      const botId = interaction.client.user.id;
  
      const automodMsgs = msgs
        .filter(m => m.author.id === botId && m.embeds?.[0]?.title?.toLowerCase() === 'automod')
        .first(10);
  
      const lines = automodMsgs.length
        ? automodMsgs.map(m => {
            const ts = `<t:${Math.floor(m.createdTimestamp / 1000)}:f>`;
            const e = m.embeds[0];
            const get = (n: string) => e!.fields?.find(f => f.name === n)?.value ?? '';
            const user = get('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || '‚Äî';
            const punishment = get('–ù–∞–∫–∞–∑–∞–Ω–∏–µ') || '‚Äî';
            const reason = get('–ü—Ä–∏—á–∏–Ω–∞') || e!.description || '‚Äî';
            return `${ts} ‚Äî ${user} ‚Ä¢ ${punishment} ‚Ä¢ ${reason}`.slice(0, 200);
          }).join('\n')
        : '–õ–æ–≥–∏ –∞–≤—Ç–æ‚Äë–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π.';
  
      const embed = new EmbedBuilder()
        .setColor('#FF4444')
        .setTitle('–õ–æ–≥–∏ –∞–≤—Ç–æ‚Äë–º–æ–¥–µ—Ä–∞—Ü–∏–∏')
        .setDescription(lines)
        .setTimestamp();
  
      if (!interaction.deferred && !interaction.replied) await interaction.deferUpdate();
      await interaction.followUp({ embeds: [embed], ephemeral: true });
    } catch (err) {
      logger.error('Error in showModerationLogs:', err);
      try {
        if (!interaction.replied) {
          await interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.', ephemeral: true });
        }
      } catch {}
    }
}