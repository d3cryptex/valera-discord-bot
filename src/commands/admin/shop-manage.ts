import { 
    SlashCommandBuilder, 
    ChatInputCommandInteraction, 
    EmbedBuilder, 
    PermissionFlagsBits 
} from 'discord.js';
import { DiscordBot } from '../../index';
import { SettingsService } from '../../services/settings/SettingsService';

export const data = new SlashCommandBuilder()
    .setName('shop-manage')
    .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .addSubcommand(subcommand =>
        subcommand
            .setName('add')
            .setDescription('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω')
            .addStringOption(option =>
                option
                    .setName('name')
                    .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
                    .setRequired(true)
            )
            .addIntegerOption(option =>
                option
                    .setName('price')
                    .setDescription('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö')
                    .setRequired(true)
                    .setMinValue(1)
                    .setMaxValue(1000000)
            )
            .addStringOption(option =>
                option
                    .setName('description')
                    .setDescription('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
                    .setRequired(false)
            )
            .addRoleOption(option =>
                option
                    .setName('role')
                    .setDescription('–†–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ')
                    .setRequired(false)
            )
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('remove')
            .setDescription('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞')
            .addIntegerOption(option =>
                option
                    .setName('item_id')
                    .setDescription('ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                    .setRequired(true)
            )
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('list')
            .setDescription('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('toggle')
            .setDescription('–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ–≤–∞—Ä')
            .addIntegerOption(option =>
                option
                    .setName('item_id')
                    .setDescription('ID —Ç–æ–≤–∞—Ä–∞')
                    .setRequired(true)
            )
    );

export async function execute(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    const settingsService = new SettingsService(bot.database, bot.redis);
    const settings = await settingsService.getGuildSettings(interaction.guild!.id);
    
    const hasPermission = await settingsService.hasPermission(interaction.member as any, settings);
    if (!hasPermission) {
        await interaction.reply({ 
            content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º.', 
            ephemeral: true 
        });
        return;
    }

    if (!settings.economy.shop_enabled) {
        const embed = new EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.')
        await interaction.editReply({ embeds: [embed]});
        return;
    }

    const subcommand = interaction.options.getSubcommand();
    
    switch (subcommand) {
        case 'add':
            await addShopItem(interaction, bot);
            break;
        case 'remove':
            await removeShopItem(interaction, bot);
            break;
        case 'list':
            await listAllShopItems(interaction, bot);
            break;
        case 'toggle':
            await toggleShopItem(interaction, bot);
            break;
    }
}

async function addShopItem(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    await interaction.deferReply({ ephemeral: true });
    
    const name = interaction.options.getString('name', true);
    const price = interaction.options.getInteger('price', true);
    const description = interaction.options.getString('description') || null;
    const role = interaction.options.getRole('role');
    
    try {
        if (!bot.database.ShopItems) throw new Error('Database not connected');

        const item = await bot.database.ShopItems.create({
            guild_id: interaction.guild!.id,
            name,
            description,
            price,
            role_id: role?.id || null,
            is_active: true,
        });
        
        const embed = new EmbedBuilder()
            .setColor('#00FF00')
            .setTitle('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
            .setDescription(`–¢–æ–≤–∞—Ä **${name}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!`)
            .addFields([
                { name: 'ID:', value: item.id.toString(), inline: true },
                { name: '–¶–µ–Ω–∞:', value: `${price} ü™ô`, inline: true },
                { name: '–†–æ–ª—å:', value: role ? `${role}` : '–ù–µ—Ç', inline: true }
            ]);
        
        if (description) {
            embed.addFields({ name: '–û–ø–∏—Å–∞–Ω–∏–µ:', value: description });
        }
        
        await interaction.editReply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Error adding shop item:', error);
        await interaction.editReply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.' });
    }
}

async function removeShopItem(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    await interaction.deferReply({ ephemeral: true });
    
    const itemId = interaction.options.getInteger('item_id', true);
    
    try {
        if (!bot.database.ShopItems) throw new Error('Database not connected');

        const item = await bot.database.ShopItems.findOne({
            where: { 
                id: itemId, 
                guild_id: interaction.guild!.id 
            }
        });
        
        if (!item) {
            await interaction.editReply({ content: '‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
            return;
        }
        
        const itemName = item.name;
        await item.destroy();
        
        const embed = new EmbedBuilder()
            .setColor('#FF0000')
            .setTitle('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω')
            .setDescription(`–¢–æ–≤–∞—Ä **${itemName}** –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.`);
        
        await interaction.editReply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Error removing shop item:', error);
        await interaction.editReply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.' });
    }
}

async function listAllShopItems(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    await interaction.deferReply({ ephemeral: true });
    
    try {
        if (!bot.database.ShopItems) throw new Error('Database not connected');

        const items = await bot.database.ShopItems.findAll({
            where: { guild_id: interaction.guild!.id },
            order: [
                ['is_active', 'DESC'],
                ['price', 'ASC']
            ],
            raw: true,
        });
        
        if (items.length === 0) {
            await interaction.editReply({ content: '–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.' });
            return;
        }
        
        let description = '';
        items.forEach((item: any) => {
            const status = item.is_active ? '‚úÖ' : '‚ùå';
            description += `${status} **${item.id}.** ${item.name} - ${item.price} ü™ô\n`;
            if (item.description) {
                description += `   ${item.description}\n`;
            }
            if (item.role_id) {
                description += `   –†–æ–ª—å: <@&${item.role_id}>\n`;
            }
            description += '\n';
        });
        
        const embed = new EmbedBuilder()
            .setColor('#0099FF')
            .setTitle('üè™ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞')
            .setDescription(description)
            .setFooter({ text: '‚úÖ = –∞–∫—Ç–∏–≤–µ–Ω, ‚ùå = –æ—Ç–∫–ª—é—á–µ–Ω' });
        
        await interaction.editReply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Error listing shop items:', error);
        await interaction.editReply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.' });
    }
}

async function toggleShopItem(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    await interaction.deferReply({ ephemeral: true });
    
    const itemId = interaction.options.getInteger('item_id', true);
    
    try {
        if (!bot.database.ShopItems) throw new Error('Database not connected');

        const item = await bot.database.ShopItems.findOne({
            where: { 
                id: itemId, 
                guild_id: interaction.guild!.id 
            }
        });
        
        if (!item) {
            await interaction.editReply({ content: '‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
            return;
        }
        
        const newStatus = !item.is_active;
        await item.update({ is_active: newStatus });
        
        const embed = new EmbedBuilder()
            .setColor(newStatus ? '#00FF00' : '#FF0000')
            .setTitle(`${newStatus ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω`)
            .setDescription(`–¢–æ–≤–∞—Ä **${item.name}** —Ç–µ–ø–µ—Ä—å ${newStatus ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}.`);
        
        await interaction.editReply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Error toggling shop item:', error);
        await interaction.editReply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞.' });
    }
}