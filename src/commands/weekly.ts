import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder, User } from 'discord.js';
import { DiscordBot } from '../index';
import { SettingsService } from '../services/settings/SettingsService';
import { DateTime } from 'luxon';

export const data = new SlashCommandBuilder()
  .setName('weekly')
  .setDescription('–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å');

export async function execute(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
  await interaction.deferReply();

  const userId = interaction.user.id;
  const guildId = interaction.guild!.id;
  const settingsService = new SettingsService(bot.database, bot.redis);
  const settings = await settingsService.getGuildSettings(guildId);
  if (!settings.economy?.weekly_bonus_enabled) {
    const embed = new EmbedBuilder()
      .setColor('#eb4034')
      .setTitle('–û—à–∏–±–∫–∞')
      .setDescription('‚ùå –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã')
      .setFooter({ text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.' });
    await interaction.reply({ embeds: [embed], ephemeral: true});
    return;
  }

  try {
    const weekNum = DateTime.now().weekNumber;
    const key = `weekly:${userId}:${guildId}`;
    const last = await bot.redis.get(key);

    if (last == `${weekNum}`) {
      await interaction.editReply({ embeds: [
        new EmbedBuilder()
          .setTitle('‚è∞ –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ')
          .setDescription('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!')
          .setColor('#FFFF00')
      ]});
      return;
    }

    // –ë–æ–Ω—É—Å ‚Äî –±–æ–ª—å—à–µ —á–µ–º daily
    const amount = Math.floor(((settings.economy.weekly_bonus_max + settings.economy.weekly_bonus_min) / 2) * 5);

    if (!bot.database.User) {
        throw new Error('Database not connected');
    }

    await bot.database.createUser(userId, interaction.user.username);
    await bot.database.User.increment('coins', { by: amount, where: { id: userId } });
    await bot.redis.set(key, `${weekNum}`, 604800); // –Ω–µ–¥–µ–ª—è

    const user = await bot.database.getUser(userId);

    await interaction.editReply({ embeds: [
      new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('üéÄ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!')
        .setDescription(`+${amount} ${settings.economy.currency_emoji}`)
        .addFields({ name: '–í–∞—à –±–∞–ª–∞–Ω—Å:', value: `${user.coins} ${settings.economy.currency_emoji}`, inline: true })
        .setFooter({ text: '–ë–æ–Ω—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' })
    ]});
  } catch (err) {
    await interaction.editReply({ embeds: [
      new EmbedBuilder()
        .setColor('#eb4034')
        .setTitle('–û—à–∏–±–∫–∞')
        .setDescription('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å.')
    ]});
  }
}