import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder } from 'discord.js';
import { DiscordBot } from '../index';
import { Op } from 'sequelize';

export const data = new SlashCommandBuilder()
    .setName('server-info')
    .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ');

export async function execute(interaction: ChatInputCommandInteraction, bot: DiscordBot) {
    await interaction.deferReply();
    
    try {
        if (!bot.database.User || !bot.database.MarkovBigram) {
            throw new Error('Database not connected');
        }

        const guild = interaction.guild!;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å XP > 0)
        const activeUserCount = await bot.database.User.count({
            where: {
                xp: {
                    [Op.gt]: 0  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Op –≤–º–µ—Å—Ç–æ Sequelize.Op
                }
            }
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Ä–æ–≤–Ω—é
        const topUser = await bot.database.User.findOne({
            order: [
                ['level', 'DESC'],
                ['xp', 'DESC']
            ],
            raw: true,
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        const totalWords = await bot.database.MarkovBigram.count({
            where: { guild_id: guild.id }
        });

        const uniqueWords = await bot.database.MarkovBigram.count({
            where: { guild_id: guild.id },
            distinct: true,
            col: 'curr_token'
        });
        
        const embed = new EmbedBuilder()
            .setColor('#0099FF')
            .setTitle(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ: ${guild.name}`)
            .setThumbnail(guild.iconURL() || null)
            .addFields([
                {
                    name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏',
                    value: `–í—Å–µ–≥–æ: ${guild.memberCount}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUserCount}`,
                    inline: true
                },
                {
                    name: 'üìà –ö–∞–Ω–∞–ª—ã',
                    value: `–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: ${guild.channels.cache.filter(c => c.type === 0).size}\n–ì–æ–ª–æ—Å–æ–≤—ã—Ö: ${guild.channels.cache.filter(c => c.type === 2).size}`,
                    inline: true
                },
                {
                    name: 'üé≠ –†–æ–ª–∏',
                    value: `${guild.roles.cache.size}`,
                    inline: true
                },
                {
                    name: 'ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    value: `–°–ª–æ–≤–∞—Ä–Ω—ã—Ö –ø–∞—Ä: ${totalWords}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: ${uniqueWords}`,
                    inline: true
                },
                {
                    name: 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫',
                    value: topUser ? 
                        `<@${topUser.id}>\n–£—Ä–æ–≤–µ–Ω—å: ${topUser.level}` : 
                        '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                    inline: true
                },
                {
                    name: 'üìÖ –°–æ–∑–¥–∞–Ω',
                    value: `<t:${Math.floor(guild.createdTimestamp / 1000)}:R>`,
                    inline: true
                }
            ])
            .setFooter({ 
                text: `ID —Å–µ—Ä–≤–µ—Ä–∞: ${guild.id}`,
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
        
        if (guild.description) {
            embed.setDescription(guild.description);
        }
        
        await interaction.editReply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Error in server-info:', error);
        const embed = new EmbedBuilder()
            .setColor('#eb4034')
            .setTitle('–û—à–∏–±–∫–∞')
            .setDescription('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ.');
        await interaction.editReply({ embeds: [embed] });
    }
}
